void wasm_byte_vec_new_empty(wasm_byte_vec_t* _out);
void wasm_byte_vec_new_uninitialized(wasm_byte_vec_t* _out, size_t); 
void wasm_byte_vec_new(wasm_byte_vec_t* _out, size_t, const(wasm_byte_t)*); 
void wasm_byte_vec_copy(wasm_byte_vec_t* _out, const(wasm_byte_vec_t)*); 
void wasm_byte_vec_delete(wasm_byte_vec_t*);
void wasm_config_delete(wasm_config_t*);
wasm_config_t* wasm_config_new();
void wasm_engine_delete(wasm_engine_t*);
wasm_engine_t* wasm_engine_new();
wasm_engine_t* wasm_engine_new_with_config(wasm_config_t*);
void wasm_store_delete(wasm_store_t*);
wasm_store_t* wasm_store_new(wasm_engine_t*);
void wasm_valtype_delete(wasm_valtype_t*);
void wasm_valtype_vec_new_empty(wasm_valtype_vec_t* _out);
void wasm_valtype_vec_new_uninitialized(wasm_valtype_vec_t* _out, size_t);
void wasm_valtype_vec_new(wasm_valtype_vec_t* _out, size_t, wasm_valtype_t**); 
void wasm_valtype_vec_copy(wasm_valtype_vec_t* _out, const(wasm_valtype_vec_t)*);
void wasm_valtype_vec_delete(wasm_valtype_vec_t*);
wasm_valtype_t* wasm_valtype_copy(const(wasm_valtype_t)*);
wasm_valtype_t* wasm_valtype_new(wasm_valkind_t);
wasm_valkind_t wasm_valtype_kind(const(wasm_valtype_t)*);
void wasm_functype_delete(wasm_functype_t*); 
void wasm_functype_vec_new_empty(wasm_functype_vec_t* _out); 
void wasm_functype_vec_new_uninitialized(wasm_functype_vec_t* _out, size_t); 
void wasm_functype_vec_new(wasm_functype_vec_t* _out, size_t, const(wasm_functype_t)**); 
void wasm_functype_vec_copy(wasm_functype_vec_t* _out, const(wasm_functype_vec_t)*);
void wasm_functype_vec_delete(wasm_functype_vec_t*);
wasm_functype_t* wasm_functype_copy(const(wasm_functype_t)*);
wasm_functype_t* wasm_functype_new(wasm_valtype_vec_t* params, wasm_valtype_vec_t* results);
const(wasm_valtype_vec_t)* wasm_functype_params(const(wasm_functype_t)*);
const(wasm_valtype_vec_t)* wasm_functype_results(const(wasm_functype_t)*);
void wasm_globaltype_delete(wasm_globaltype_t*);
void wasm_globaltype_vec_new_empty(wasm_globaltype_vec_t* _out); 
void wasm_globaltype_vec_new_uninitialized(wasm_globaltype_vec_t* _out, size_t); 
void wasm_globaltype_vec_new(wasm_globaltype_vec_t* _out, size_t, const(wasm_globaltype_t)**); 
void wasm_globaltype_vec_copy(wasm_globaltype_vec_t* _out, const(wasm_globaltype_vec_t)*); 
void wasm_globaltype_vec_delete(wasm_globaltype_vec_t*);
wasm_globaltype_t* wasm_globaltype_copy(const(wasm_globaltype_t)*);
wasm_globaltype_t* wasm_globaltype_new(wasm_valtype_t*, wasm_mutability_t);
const(wasm_valtype_t)* wasm_globaltype_content(const(wasm_globaltype_t)*);
wasm_mutability_t wasm_globaltype_mutability(const(wasm_globaltype_t)*);
void wasm_tabletype_delete(wasm_tabletype_t*);
void wasm_tabletype_vec_new_empty(wasm_tabletype_vec_t* _out);
void wasm_tabletype_vec_new_uninitialized(wasm_tabletype_vec_t* _out, size_t); 
void wasm_tabletype_vec_new(wasm_tabletype_vec_t* _out, size_t, const(wasm_tabletype_t)**); 
void wasm_tabletype_vec_copy(wasm_tabletype_vec_t* _out, const(wasm_tabletype_vec_t)*);
void wasm_tabletype_vec_delete(wasm_tabletype_vec_t*); 
wasm_tabletype_t* wasm_tabletype_copy(const(wasm_tabletype_t)*);
wasm_tabletype_t* wasm_tabletype_new(wasm_valtype_t*, const(wasm_limits_t)*);
const(wasm_valtype_t)* wasm_tabletype_element(const(wasm_tabletype_t)*);
const(wasm_limits_t)* wasm_tabletype_limits(const(wasm_tabletype_t)*);
void wasm_memorytype_delete(wasm_memorytype_t*);
void wasm_memorytype_vec_new_empty(wasm_memorytype_vec_t* _out); 
void wasm_memorytype_vec_new_uninitialized(wasm_memorytype_vec_t* _out, size_t);
void wasm_memorytype_vec_new(wasm_memorytype_vec_t* _out, size_t, const(wasm_memorytype_t)**);
void wasm_memorytype_vec_copy(wasm_memorytype_vec_t* _out, const(wasm_memorytype_vec_t)*); 
void wasm_memorytype_vec_delete(wasm_memorytype_vec_t*);
wasm_memorytype_t* wasm_memorytype_copy(const(wasm_memorytype_t)*);
wasm_memorytype_t* wasm_memorytype_new(const(wasm_limits_t)*);
const(wasm_limits_t)* wasm_memorytype_limits(const(wasm_memorytype_t)*);
void wasm_externtype_delete(wasm_externtype_t*);
void wasm_externtype_vec_new_empty(wasm_externtype_vec_t* _out); 
void wasm_externtype_vec_new_uninitialized(wasm_externtype_vec_t* _out, size_t); 
void wasm_externtype_vec_new(wasm_externtype_vec_t* _out, size_t, const(wasm_externtype_t)**); 
void wasm_externtype_vec_copy(wasm_externtype_vec_t* _out, const(wasm_externtype_vec_t)*);
void wasm_externtype_vec_delete(wasm_externtype_vec_t*);
wasm_externtype_t* wasm_externtype_copy(const(wasm_externtype_t)*);
wasm_externkind_t wasm_externtype_kind(const(wasm_externtype_t)*);
wasm_externtype_t* wasm_functype_as_externtype(wasm_functype_t*);
wasm_externtype_t* wasm_globaltype_as_externtype(wasm_globaltype_t*);
wasm_externtype_t* wasm_tabletype_as_externtype(wasm_tabletype_t*);
wasm_externtype_t* wasm_memorytype_as_externtype(wasm_memorytype_t*);
wasm_functype_t* wasm_externtype_as_functype(wasm_externtype_t*);
wasm_globaltype_t* wasm_externtype_as_globaltype(wasm_externtype_t*);
wasm_tabletype_t* wasm_externtype_as_tabletype(wasm_externtype_t*);
wasm_memorytype_t* wasm_externtype_as_memorytype(wasm_externtype_t*);
const(wasm_externtype_t)* wasm_functype_as_externtype_const(const(wasm_functype_t)*);
const(wasm_externtype_t)* wasm_globaltype_as_externtype_const(const(wasm_globaltype_t)*);
const(wasm_externtype_t)* wasm_tabletype_as_externtype_const(const(wasm_tabletype_t)*);
const(wasm_externtype_t)* wasm_memorytype_as_externtype_const(const(wasm_memorytype_t)*);
const(wasm_functype_t)* wasm_externtype_as_functype_const(const(wasm_externtype_t)*);
const(wasm_globaltype_t)* wasm_externtype_as_globaltype_const(const(wasm_externtype_t)*);
const(wasm_tabletype_t)* wasm_externtype_as_tabletype_const(const(wasm_externtype_t)*);
const(wasm_memorytype_t)* wasm_externtype_as_memorytype_const(const(wasm_externtype_t)*);
void wasm_importtype_delete(wasm_importtype_t*);
void wasm_importtype_vec_new_empty(wasm_importtype_vec_t* _out); 
void wasm_importtype_vec_new_uninitialized(wasm_importtype_vec_t* _out, size_t);
void wasm_importtype_vec_new(wasm_importtype_vec_t* _out, size_t, const(wasm_importtype_t)**);
void wasm_importtype_vec_copy(wasm_importtype_vec_t* _out, const(wasm_importtype_vec_t)*);
void wasm_importtype_vec_delete(wasm_importtype_vec_t*);
wasm_importtype_t* wasm_importtype_copy(const(wasm_importtype_t)*);
wasm_importtype_t* wasm_importtype_new(wasm_name_t* _module, wasm_name_t* name, wasm_externtype_t*);
const(wasm_name_t)* wasm_importtype_module(const(wasm_importtype_t)*);
const(wasm_name_t)* wasm_importtype_name(const(wasm_importtype_t)*);
const(wasm_externtype_t)* wasm_importtype_type(const(wasm_importtype_t)*);
void wasm_exporttype_delete(wasm_exporttype_t*);
void wasm_exporttype_vec_new_empty(wasm_exporttype_vec_t* _out);
void wasm_exporttype_vec_new_uninitialized(wasm_exporttype_vec_t* _out, size_t);
void wasm_exporttype_vec_new(wasm_exporttype_vec_t* _out, size_t, const(wasm_exporttype_t)**); 
void wasm_exporttype_vec_copy(wasm_exporttype_vec_t* _out, const(wasm_exporttype_vec_t)*);
void wasm_exporttype_vec_delete(wasm_exporttype_vec_t*);
wasm_exporttype_t* wasm_exporttype_copy(const(wasm_exporttype_t)*);
wasm_exporttype_t* wasm_exporttype_new(wasm_name_t*, wasm_externtype_t*);
const(wasm_name_t)* wasm_exporttype_name(const(wasm_exporttype_t)*);
const(wasm_externtype_t)* wasm_exporttype_type(const(wasm_exporttype_t)*);
void wasm_val_delete(wasm_val_t* v);
void wasm_val_copy(wasm_val_t* _out, const(wasm_val_t)*);
void wasm_val_vec_new_empty(wasm_val_vec_t* _out);
void wasm_val_vec_new_uninitialized(wasm_val_vec_t* _out, size_t); 
void wasm_val_vec_new(wasm_val_vec_t* _out, size_t, const(wasm_val_t)*);
void wasm_val_vec_copy(wasm_val_vec_t* _out, const(wasm_val_vec_t)*); 
void wasm_val_vec_delete(wasm_val_vec_t*);
void wasm_ref_delete(wasm_ref_t*);
wasm_ref_t* wasm_ref_copy(const(wasm_ref_t)*);
bool wasm_ref_same(const(wasm_ref_t)*, const(wasm_ref_t)*); 
void* wasm_ref_get_host_info(const(wasm_ref_t)*);
void wasm_ref_set_host_info(wasm_ref_t*, void*);
void wasm_ref_set_host_info_with_finalizer(wasm_ref_t*, void*, wasmFinalizerFuncT);
void wasm_frame_delete(wasm_frame_t*);
void wasm_frame_vec_new_empty(wasm_frame_vec_t* _out); 
void wasm_frame_vec_new_uninitialized(wasm_frame_vec_t* _out, size_t);
void wasm_frame_vec_new(wasm_frame_vec_t* _out, size_t, const(wasm_frame_t)**); 
void wasm_frame_vec_copy(wasm_frame_vec_t* _out, const(wasm_frame_vec_t)*); 
void wasm_frame_vec_delete(wasm_frame_vec_t*);
wasm_frame_t* wasm_frame_copy(const(wasm_frame_t)*);
wasm_instance_t* wasm_frame_instance(const(wasm_frame_t)*);
uint32_t wasm_frame_func_index(const(wasm_frame_t)*);
size_t wasm_frame_func_offset(const(wasm_frame_t)*);
size_t wasm_frame_module_offset(const(wasm_frame_t)*);
void wasm_trap_delete(wasm_trap_t*);
wasm_trap_t* wasm_trap_copy(const(wasm_trap_t)*);
bool wasm_trap_same(const(wasm_trap_t)*, const(wasm_trap_t)*);
void* wasm_trap_get_host_info(const(wasm_trap_t)*);
void wasm_trap_set_host_info(wasm_trap_t*, void*);
void wasm_trap_set_host_info_with_finalizer(wasm_trap_t*, void*, wasmFinalizerFuncT);
wasm_ref_t* wasm_trap_as_ref(wasm_trap_t*);
wasm_trap_t* wasm_ref_as_trap(wasm_ref_t*);
const(wasm_ref_t)* wasm_trap_as_ref_const(const(wasm_trap_t)*);
const(wasm_trap_t)* wasm_ref_as_trap_const(const(wasm_ref_t)*);
wasm_trap_t* wasm_trap_new(wasm_store_t* store, const(wasm_message_t)*);
void wasm_trap_message(const(wasm_trap_t)*, wasm_message_t* _out);
wasm_frame_t* wasm_trap_origin(const(wasm_trap_t)*);
void wasm_trap_trace(const(wasm_trap_t)*, wasm_frame_vec_t* _out);
void wasm_foreign_delete(wasm_foreign_t*);
wasm_foreign_t* wasm_foreign_copy(const(wasm_foreign_t)*);
bool wasm_foreign_same(const(wasm_foreign_t)*, const(wasm_foreign_t)*);
void* wasm_foreign_get_host_info(const(wasm_foreign_t)*);
void wasm_foreign_set_host_info(wasm_foreign_t*, void*);
void wasm_foreign_set_host_info_with_finalizer(wasm_foreign_t*, void*, wasmFinalizerFuncT);
wasm_ref_t* wasm_foreign_as_ref(wasm_foreign_t*);
wasm_foreign_t* wasm_ref_as_foreign(wasm_ref_t*);
const(wasm_ref_t)* wasm_foreign_as_ref_const(const(wasm_foreign_t)*);
const(wasm_foreign_t)* wasm_ref_as_foreign_const(const(wasm_ref_t)*);
wasm_foreign_t* wasm_foreign_new(wasm_store_t*);
void wasm_module_delete(wasm_module_t*); 
wasm_module_t* wasm_module_copy(const(wasm_module_t)*);
bool wasm_module_same(const(wasm_module_t)*, const(wasm_module_t)*); 
void* wasm_module_get_host_info(const(wasm_module_t)*); 
void wasm_module_set_host_info(wasm_module_t*, void*);
void wasm_module_set_host_info_with_finalizer(wasm_module_t*, void*, wasmFinalizerFuncT);
wasm_ref_t* wasm_module_as_ref(wasm_module_t*);
wasm_module_t* wasm_ref_as_module(wasm_ref_t*);
const(wasm_ref_t)* wasm_module_as_ref_const(const(wasm_module_t)*);
const(wasm_module_t)* wasm_ref_as_module_const(const(wasm_ref_t)*);
void wasm_shared_module_delete(wasm_shared_module_t*);
wasm_shared_module_t* wasm_module_share(const(wasm_module_t)*);
wasm_module_t* wasm_module_obtain(wasm_store_t*, const(wasm_shared_module_t)*);
wasm_module_t* wasm_module_new(wasm_store_t*, const(wasm_byte_vec_t)* binary);
bool wasm_module_validate(wasm_store_t*, const(wasm_byte_vec_t)* binary);
void wasm_module_imports(const(wasm_module_t)*, wasm_importtype_vec_t* _out);
void wasm_module_exports(const(wasm_module_t)*, wasm_exporttype_vec_t* _out);
void wasm_module_serialize(const(wasm_module_t)*, wasm_byte_vec_t* _out);
wasm_module_t* wasm_module_deserialize(wasm_store_t*, const(wasm_byte_vec_t)*);
void wasm_func_delete(wasm_func_t*);
wasm_func_t* wasm_func_copy(const(wasm_func_t)*); 
bool wasm_func_same(const(wasm_func_t)*, const(wasm_func_t)*); 
void* wasm_func_get_host_info(const(wasm_func_t)*); 
void wasm_func_set_host_info(wasm_func_t*, void*);
void wasm_func_set_host_info_with_finalizer(wasm_func_t*, void*, wasmFinalizerFuncT); 
wasm_ref_t* wasm_func_as_ref(wasm_func_t*);
wasm_func_t* wasm_ref_as_func(wasm_ref_t*);
const(wasm_ref_t)* wasm_func_as_ref_const(const(wasm_func_t)*);
const(wasm_func_t)* wasm_ref_as_func_const(const(wasm_ref_t)*);
wasm_func_t* wasm_func_new(wasm_store_t*, const(wasm_functype_t)*, wasm_func_callback_t);
wasm_func_t* wasm_func_new_with_env(wasm_store_t*, const(wasm_functype_t)* type, wasm_func_callback_with_env_t, void* env, wasmFinalizerFuncT);
wasm_functype_t* wasm_func_type(const(wasm_func_t)*);
size_t wasm_func_param_arity(const(wasm_func_t)*);
size_t wasm_func_result_arity(const(wasm_func_t)*);
wasm_trap_t* wasm_func_call(const(wasm_func_t)*, const(wasm_val_vec_t)* args, wasm_val_vec_t* results);
void wasm_global_delete(wasm_global_t*);
wasm_global_t* wasm_global_copy(const(wasm_global_t)*); 
bool wasm_global_same(const(wasm_global_t)*, const(wasm_global_t)*); 
void* wasm_global_get_host_info(const(wasm_global_t)*);
void wasm_global_set_host_info(wasm_global_t*, void*);
void wasm_global_set_host_info_with_finalizer(wasm_global_t*, void*, wasmFinalizerFuncT);
wasm_ref_t* wasm_global_as_ref(wasm_global_t*);
wasm_global_t* wasm_ref_as_global(wasm_ref_t*);
const(wasm_ref_t)* wasm_global_as_ref_const(const(wasm_global_t)*);
const(wasm_global_t)* wasm_ref_as_global_const(const(wasm_ref_t)*);
wasm_global_t* wasm_global_new(wasm_store_t*, const(wasm_globaltype_t)*, const(wasm_val_t)*);
wasm_globaltype_t* wasm_global_type(const(wasm_global_t)*);
void wasm_global_get(const(wasm_global_t)*, wasm_val_t* _out);
void wasm_global_set(wasm_global_t*, const(wasm_val_t)*);
void wasm_table_delete(wasm_table_t*);
wasm_table_t* wasm_table_copy(const(wasm_table_t)*);
bool wasm_table_same(const(wasm_table_t)*, const(wasm_table_t)*);
void* wasm_table_get_host_info(const(wasm_table_t)*);
void wasm_table_set_host_info(wasm_table_t*, void*);
void wasm_table_set_host_info_with_finalizer(wasm_table_t*, void*, wasmFinalizerFuncT);
wasm_ref_t* wasm_table_as_ref(wasm_table_t*); 
wasm_table_t* wasm_ref_as_table(wasm_ref_t*); 
const(wasm_ref_t)* wasm_table_as_ref_const(const(wasm_table_t)*); 
const(wasm_table_t)* wasm_ref_as_table_const(const(wasm_ref_t)*);
wasm_table_t* wasm_table_new(wasm_store_t*, const(wasm_tabletype_t)*, wasm_ref_t* init);
wasm_tabletype_t* wasm_table_type(const(wasm_table_t)*);
wasm_ref_t* wasm_table_get(const(wasm_table_t)*, wasm_table_size_t index);
bool wasm_table_set(wasm_table_t*, wasm_table_size_t index, wasm_ref_t*);
wasm_table_size_t wasm_table_size(const(wasm_table_t)*);
bool wasm_table_grow(wasm_table_t*, wasm_table_size_t delta, wasm_ref_t* init);
void wasm_memory_delete(wasm_memory_t*);
wasm_memory_t* wasm_memory_copy(const(wasm_memory_t)*);
bool wasm_memory_same(const(wasm_memory_t)*, const(wasm_memory_t)*);
void* wasm_memory_get_host_info(const(wasm_memory_t)*);
void wasm_memory_set_host_info(wasm_memory_t*, void*);
void wasm_memory_set_host_info_with_finalizer(wasm_memory_t*, void*, wasmFinalizerFuncT);
wasm_ref_t* wasm_memory_as_ref(wasm_memory_t*);
wasm_memory_t* wasm_ref_as_memory(wasm_ref_t*);
const(wasm_ref_t)* wasm_memory_as_ref_const(const(wasm_memory_t)*);
const(wasm_memory_t)* wasm_ref_as_memory_const(const(wasm_ref_t)*);
wasm_memory_t* wasm_memory_new(wasm_store_t*, const(wasm_memorytype_t)*);
wasm_memorytype_t* wasm_memory_type(const(wasm_memory_t)*);
byte_t* wasm_memory_data(wasm_memory_t*);
size_t wasm_memory_data_size(const(wasm_memory_t)*);
wasm_memory_pages_t wasm_memory_size(const(wasm_memory_t)*);
bool wasm_memory_grow(wasm_memory_t*, wasm_memory_pages_t delta);
void wasm_extern_delete(wasm_extern_t*);
wasm_extern_t* wasm_extern_copy(const(wasm_extern_t)*); 
bool wasm_extern_same(const(wasm_extern_t)*, const(wasm_extern_t)*); 
void* wasm_extern_get_host_info(const(wasm_extern_t)*);
void wasm_extern_set_host_info(wasm_extern_t*, void*);
void wasm_extern_set_host_info_with_finalizer(wasm_extern_t*, void*, wasmFinalizerFuncT);
wasm_ref_t* wasm_extern_as_ref(wasm_extern_t*);
wasm_extern_t* wasm_ref_as_extern(wasm_ref_t*);
const(wasm_ref_t)* wasm_extern_as_ref_const(const(wasm_extern_t)*);
const(wasm_extern_t)* wasm_ref_as_extern_const(const(wasm_ref_t)*);
void wasm_extern_vec_new_empty(wasm_extern_vec_t* _out); 
void wasm_extern_vec_new_uninitialized(wasm_extern_vec_t* _out, size_t);
void wasm_extern_vec_new(wasm_extern_vec_t* _out, size_t, const(wasm_extern_t)**);
void wasm_extern_vec_copy(wasm_extern_vec_t* _out, const(wasm_extern_vec_t)*);
void wasm_extern_vec_delete(wasm_extern_vec_t*);
wasm_externkind_t wasm_extern_kind(const(wasm_extern_t)*);
wasm_externtype_t* wasm_extern_type(const(wasm_extern_t)*);
wasm_extern_t* wasm_func_as_extern(wasm_func_t*);
wasm_extern_t* wasm_global_as_extern(wasm_global_t*);
wasm_extern_t* wasm_table_as_extern(wasm_table_t*);
wasm_extern_t* wasm_memory_as_extern(wasm_memory_t*);
wasm_func_t* wasm_extern_as_func(wasm_extern_t*);
wasm_global_t* wasm_extern_as_global(wasm_extern_t*);
wasm_table_t* wasm_extern_as_table(wasm_extern_t*);
wasm_memory_t* wasm_extern_as_memory(wasm_extern_t*);
const(wasm_extern_t)* wasm_func_as_extern_const(const(wasm_func_t)*);
const(wasm_extern_t)* wasm_global_as_extern_const(const(wasm_global_t)*);
const(wasm_extern_t)* wasm_table_as_extern_const(const(wasm_table_t)*);
const(wasm_extern_t)* wasm_memory_as_extern_const(const(wasm_memory_t)*);
const(wasm_func_t)* wasm_extern_as_func_const(const(wasm_extern_t)*);
const(wasm_global_t)* wasm_extern_as_global_const(const(wasm_extern_t)*);
const(wasm_table_t)* wasm_extern_as_table_const(const(wasm_extern_t)*);
const(wasm_memory_t)* wasm_extern_as_memory_const(const(wasm_extern_t)*);
void wasm_instance_delete(wasm_instance_t*);
wasm_instance_t* wasm_instance_copy(const(wasm_instance_t)*);
bool wasm_instance_same(const(wasm_instance_t)*, const(wasm_instance_t)*); 
void* wasm_instance_get_host_info(const(wasm_instance_t)*);
void wasm_instance_set_host_info(wasm_instance_t*, void*);
void wasm_instance_set_host_info_with_finalizer(wasm_instance_t*, void*, wasmFinalizerFuncT);
wasm_ref_t* wasm_instance_as_ref(wasm_instance_t*);
wasm_instance_t* wasm_ref_as_instance(wasm_ref_t*);
const(wasm_ref_t)* wasm_instance_as_ref_const(const(wasm_instance_t)*);
const(wasm_instance_t)* wasm_ref_as_instance_const(const(wasm_ref_t)*);
wasm_instance_t* wasm_instance_new(wasm_store_t*, const(wasm_module_t)*, const(wasm_extern_vec_t)* imports, wasm_trap_t**);
void wasm_instance_exports(const(wasm_instance_t)*, wasm_extern_vec_t* _out);
void wasi_config_delete(wasi_config_t*);
wasi_config_t* wasi_config_new();
void wasi_config_set_argv(wasi_config_t* config, int argc, const(char)** argv);
void wasi_config_inherit_argv(wasi_config_t* config);
void wasi_config_set_env(wasi_config_t* config, int envc, const(char)** names, const(char)** values);
void wasi_config_inherit_env(wasi_config_t* config);
bool wasi_config_set_stdin_file(wasi_config_t* config, const(char)* path);
void wasi_config_set_stdin_bytes(wasi_config_t* config, wasm_byte_vec_t* binary);
void wasi_config_inherit_stdin(wasi_config_t* config);
bool wasi_config_set_std_out_file(wasi_config_t* config, const(char)* path);
void wasi_config_inherit_std_out(wasi_config_t* config);
bool wasi_config_set_stderr_file(wasi_config_t* config, const(char)* path);
void wasi_config_inherit_stderr(wasi_config_t* config);
bool wasi_config_preopen_dir(wasi_config_t *config, const(char)* path, const(char)* guest_path);
wasmtime_error_t* wasmtime_error_new(const(char)*);
void wasmtime_error_delete(wasmtime_error_t* error);
void wasmtime_error_message(const(wasmtime_error_t)* error, wasm_name_t* message);
bool wasmtime_error_exit_status(const(wasmtime_error_t)*, int* status);
void wasmtime_error_wasm_trace(const(wasmtime_error_t)*, wasm_frame_vec_t* _out);
void wasmtime_config_debug_info_set(wasm_config_t*, bool);
void wasmtime_config_consume_fuel_set(wasm_config_t*, bool);
void wasmtime_config_epoch_interruption_set(wasm_config_t*, bool);
void wasmtime_config_max_wasm_stack_set(wasm_config_t*, size_t);
void wasmtime_config_wasm_threads_set(wasm_config_t*, bool);
void wasmtime_config_wasm_tail_call_set(wasm_config_t*, bool);
void wasmtime_config_wasm_reference_types_set(wasm_config_t*, bool);
void wasmtime_config_wasm_function_references_set(wasm_config_t*, bool);
void wasmtime_config_wasm_gc_set(wasm_config_t*, bool);
void wasmtime_config_wasm_simd_set(wasm_config_t*, bool);
void wasmtime_config_wasm_relaxed_simd_set(wasm_config_t*, bool);
void wasmtime_config_wasm_relaxed_simd_deterministic_set(wasm_config_t*, bool);
void wasmtime_config_wasm_bulk_memory_set(wasm_config_t*, bool);
void wasmtime_config_wasm_multi_value_set(wasm_config_t*, bool);
void wasmtime_config_wasm_multi_memory_set(wasm_config_t*, bool);
void wasmtime_config_wasm_memory64_set(wasm_config_t*, bool);
void wasmtime_config_strategy_set(wasm_config_t*, wasmtime_strategy_t);
void wasmtime_config_parallel_compilation_set(wasm_config_t*, bool);
void wasmtime_config_cranelift_debug_verifier_set(wasm_config_t*, bool);
void wasmtime_config_cranelift_nan_canonicalization_set(wasm_config_t*, bool);
void wasmtime_config_cranelift_opt_level_set(wasm_config_t*, wasmtime_opt_level_t);
void wasmtime_config_profiler_set(wasm_config_t*, wasmtime_profiling_strategy_t);
void wasmtime_config_static_memory_forced_set(wasm_config_t*, bool);
void wasmtime_config_static_memory_maximum_size_set(wasm_config_t*, uint64_t);
void wasmtime_config_static_memory_guard_size_set(wasm_config_t*, uint64_t);
void wasmtime_config_dynamic_memory_guard_size_set(wasm_config_t*, uint64_t);
void wasmtime_config_dynamic_memory_reserved_for_growth_set(wasm_config_t*, uint64_t);
void wasmtime_config_native_unwind_info_set(wasm_config_t*, bool);
wasmtime_error_t* wasmtime_config_cache_config_load(wasm_config_t*, const(char)*);
wasmtime_error_t* wasmtime_config_target_set(wasm_config_t*, const(char)*);
void wasmtime_config_cranelift_flag_enable(wasm_config_t*, const(char)*);
void wasmtime_config_cranelift_flag_set(wasm_config_t*, const(char)* key, const(char)* value);
void wasmtime_config_macos_use_mach_ports_set(wasm_config_t*, bool);
void wasmtime_config_host_memory_creator_set(wasm_config_t*, wasmtime_memory_creator_t*);
void wasmtime_config_memory_init_cow_set(wasm_config_t*, bool);
void wasmtime_engine_increment_epoch(wasm_engine_t* engine);
wasmtime_error_t* wasmtime_module_new(wasm_engine_t* engine, const(uint8_t)* wasm, size_t wasm_len, wasmtime_module_t** ret);
void wasmtime_module_delete(wasmtime_module_t* m);
wasmtime_module_t* wasmtime_module_clone(wasmtime_module_t* m);
void wasmtime_module_imports(const(wasmtime_module_t)* _module, wasm_importtype_vec_t* _out);
void wasmtime_module_exports(const(wasmtime_module_t)* _module, wasm_exporttype_vec_t* _out);
wasmtime_error_t* wasmtime_module_validate(wasm_engine_t* engine, const(uint8_t)* wasm, size_t wasm_len);
wasmtime_error_t* wasmtime_module_serialize(wasmtime_module_t* _module, wasm_byte_vec_t* ret);
wasmtime_error_t* wasmtime_module_deserialize(wasm_engine_t* engine, const(uint8_t) *bytes, size_t bytes_len, wasmtime_module_t** ret);
wasmtime_error_t* wasmtime_module_deserialize_file(wasm_engine_t* engine, const(char)* path, wasmtime_module_t** ret);
void wasmtime_module_image_range(const(wasmtime_module_t)* _module, void** start, void** end);
wasmtime_error_t* wasmtime_sharedmemory_new(const(wasm_engine_t) *engine, const(wasm_memorytype_t)* ty, wasmtime_sharedmemory_t** ret);
void wasmtime_sharedmemory_delete(wasmtime_sharedmemory_t* memory);
wasmtime_sharedmemory_t* wasmtime_sharedmemory_clone(const(wasmtime_sharedmemory_t)* memory);
wasm_memorytype_t* wasmtime_sharedmemory_type(const(wasmtime_sharedmemory_t)* memory);
uint8_t* wasmtime_sharedmemory_data(const(wasmtime_sharedmemory_t)* memory);
size_t wasmtime_sharedmemory_data_size(const(wasmtime_sharedmemory_t)* memory);
uint64_t wasmtime_sharedmemory_size(const(wasmtime_sharedmemory_t)* memory);
wasmtime_error_t* wasmtime_sharedmemory_grow(const(wasmtime_sharedmemory_t)* memory, uint64_t delta, uint64_t* prev_size);
wasmtime_store_t* wasmtime_store_new(wasm_engine_t* engine, void* data, wasmFinalizerFuncT);
wasmtime_context_t* wasmtime_store_context(wasmtime_store_t* store);
void wasmtime_store_limiter(wasmtime_store_t* store, int64_t memory_size, int64_t table_elements, int64_t instances, int64_t tables, int64_t memories);
void wasmtime_store_delete(wasmtime_store_t* store);
void* wasmtime_context_get_data(const(wasmtime_context_t)* context);
void wasmtime_context_set_data(wasmtime_context_t* context, void* data);
void wasmtime_context_gc(wasmtime_context_t* context);
wasmtime_error_t* wasmtime_context_set_fuel(wasmtime_context_t* store, uint64_t fuel);
wasmtime_error_t* wasmtime_context_get_fuel(const(wasmtime_context_t)* context, uint64_t* fuel);
wasmtime_error_t* wasmtime_context_set_wasi(wasmtime_context_t* context, wasi_config_t* wasi);
void wasmtime_context_set_epoch_deadline(wasmtime_context_t* context, uint64_t ticks_beyond_current);
void wasmtime_store_epoch_deadline_callback(wasmtime_store_t* store, extern(C) wasmtime_error_t* function(wasmtime_context_t* context, void* data, uint64_t* epoch_deadline_delta, wasmtime_update_deadline_kind_t* update_kind) func, void *data, wasmFinalizerFuncT);
void wasmtime_extern_delete(wasmtime_extern_t* val);
wasm_externtype_t* wasmtime_extern_type(wasmtime_context_t* context, wasmtime_extern_t* val);
wasmtime_anyref_t* wasmtime_anyref_clone(wasmtime_context_t* context, wasmtime_anyref_t* _ref);
void wasmtime_anyref_delete(wasmtime_context_t* context, wasmtime_anyref_t* _ref);
wasmtime_anyref_t* wasmtime_anyref_from_raw(wasmtime_context_t* context, uint32_t raw);
uint32_t wasmtime_anyref_to_raw(wasmtime_context_t* context, const(wasmtime_anyref_t)* _ref);
wasmtime_anyref_t* wasmtime_anyref_from_i31(wasmtime_context_t* context, uint32_t i31val);
bool wasmtime_anyref_i31_get_u(wasmtime_context_t* context, wasmtime_anyref_t* anyref, uint32_t* dst);
bool wasmtime_anyref_i31_get_s(wasmtime_context_t* context, wasmtime_anyref_t* anyref, int32_t* dst);
wasmtime_externref_t* wasmtime_externref_new(wasmtime_context_t *context, void* data, wasmFinalizerFuncT);
void* wasmtime_externref_data(wasmtime_context_t* context, wasmtime_externref_t* data);
wasmtime_externref_t* wasmtime_externref_clone(wasmtime_context_t* context, wasmtime_externref_t* _ref);
void wasmtime_externref_delete(wasmtime_context_t* context, wasmtime_externref_t* _ref);
wasmtime_externref_t* wasmtime_externref_from_raw(wasmtime_context_t* context, uint32_t raw);
uint32_t wasmtime_externref_to_raw(wasmtime_context_t* context, const(wasmtime_externref_t)* _ref);
void wasmtime_val_delete(wasmtime_context_t* context, wasmtime_val_t* val);
void wasmtime_val_copy(wasmtime_context_t* context, wasmtime_val_t* dst, const(wasmtime_val_t)* src);
void wasmtime_func_new(wasmtime_context_t* store, const(wasm_functype_t)* type, wasmtime_func_callback_t callback, void* env, wasmFinalizerFuncT, wasmtime_func_t* ret);
void wasmtime_func_new_unchecked(wasmtime_context_t* store, const(wasm_functype_t)* type, wasmtime_func_unchecked_callback_t callback, void* env, wasmFinalizerFuncT, wasmtime_func_t* ret);
wasm_functype_t* wasmtime_func_type(const(wasmtime_context_t)* store,const(wasmtime_func_t) *func);
wasmtime_error_t* wasmtime_func_call(wasmtime_context_t* store, const(wasmtime_func_t)* func, const(wasmtime_val_t)* args, size_t nargs, wasmtime_val_t* results, size_t nresults, wasm_trap_t** trap);
wasmtime_error_t* wasmtime_func_call_unchecked(wasmtime_context_t* store, const(wasmtime_func_t)* func, wasmtime_val_raw_t* args_and_results,                           size_t args_and_results_len, wasm_trap_t **trap);
bool wasmtime_caller_export_get(wasmtime_caller_t* caller, const(char)* name, size_t name_len, wasmtime_extern_t* item);
wasmtime_context_t* wasmtime_caller_context(wasmtime_caller_t* caller);
void wasmtime_func_from_raw(wasmtime_context_t* context, void* raw, wasmtime_func_t* ret);
void* wasmtime_func_to_raw(wasmtime_context_t* context, const(wasmtime_func_t)* func);
wasmtime_error_t* wasmtime_global_new(wasmtime_context_t* store, const(wasm_globaltype_t)* type, const(wasmtime_val_t)* val, wasmtime_global_t* ret);
wasm_globaltype_t* wasmtime_global_type(const(wasmtime_context_t)* store, const(wasmtime_global_t)* global);
void wasmtime_global_get(wasmtime_context_t* store, const(wasmtime_global_t)* global, wasmtime_val_t* _out);
wasmtime_error_t* wasmtime_global_set(wasmtime_context_t* store, const(wasmtime_global_t)* global, const(wasmtime_val_t)* val);
wasmtime_error_t* wasmtime_instance_new(wasmtime_context_t* store, const(wasmtime_module_t)* _module, const(wasmtime_extern_t)* imports, size_t nimports, wasmtime_instance_t* instance, wasm_trap_t** trap);
bool wasmtime_instance_export_get(wasmtime_context_t* store, const(wasmtime_instance_t)* instance, const(char)* name, size_t name_len, wasmtime_extern_t* item);
bool wasmtime_instance_export_nth(wasmtime_context_t* store, const(wasmtime_instance_t)* instance, size_t index, char** name, size_t* name_len, wasmtime_extern_t* item);
void wasmtime_instance_pre_delete(wasmtime_instance_pre_t* instance_pre);
wasmtime_error_t* wasmtime_instance_pre_instantiate(const(wasmtime_instance_pre_t)* instance_pre, wasmtime_store_t* store, wasmtime_instance_t* instance, wasm_trap_t** trap_ptr);
wasmtime_module_t* wasmtime_instance_pre_module(wasmtime_instance_pre_t* instance_pre);
wasmtime_linker_t* wasmtime_linker_new(wasm_engine_t* engine);
wasmtime_linker_t* wasmtime_linker_clone(wasmtime_linker_t* linker);
void wasmtime_linker_delete(wasmtime_linker_t* linker);
void wasmtime_linker_allow_shadowing(wasmtime_linker_t* linker, bool allow_shadowing);
wasmtime_error_t* wasmtime_linker_define(wasmtime_linker_t* linker, wasmtime_context_t* store, const(char)* _module, size_t module_len, const(char)* name, size_t name_len, const(wasmtime_extern_t)* item);
wasmtime_error_t* wasmtime_linker_define_func(wasmtime_linker_t* linker, const(char)* _module, size_t module_len, const(char)* name, size_t name_len, const(wasm_functype_t)* ty, wasmtime_func_callback_t cb, void *data, wasmFinalizerFuncT);
wasmtime_error_t* wasmtime_linker_define_func_unchecked(wasmtime_linker_t* linker, const(char)* _module, size_t module_len, const(char)* name, size_t name_len, const(wasm_functype_t)* ty, wasmtime_func_unchecked_callback_t cb, void* data, wasmFinalizerFuncT);
wasmtime_error_t* wasmtime_linker_define_wasi(wasmtime_linker_t* linker);
wasmtime_error_t* wasmtime_linker_define_instance(wasmtime_linker_t* linker, wasmtime_context_t* store, const(char)* name, size_t name_len, const(wasmtime_instance_t)* instance);
wasmtime_error_t* wasmtime_linker_instantiate(const(wasmtime_linker_t)* linker, wasmtime_context_t* store, const(wasmtime_module_t)* _module, wasmtime_instance_t* instance, wasm_trap_t** trap);
wasmtime_error_t* wasmtime_linker_module(wasmtime_linker_t* linker, wasmtime_context_t* store, const(char)* name, size_t name_len, const(wasmtime_module_t)* _module);
wasmtime_error_t* wasmtime_linker_get_default(const(wasmtime_linker_t)* linker, wasmtime_context_t* store, const(char)* name, size_t name_len, wasmtime_func_t* func);
bool wasmtime_linker_get(const(wasmtime_linker_t)* linker, wasmtime_context_t* store, const(char)* _module, size_t module_len, const(char)* name, size_t name_len, wasmtime_extern_t* item);
wasmtime_error_t* wasmtime_linker_instantiate_pre(const(wasmtime_linker_t)* linker, const(wasmtime_module_t)* _module, wasmtime_instance_pre_t** instance_pre);
wasm_memorytype_t* wasmtime_memorytype_new(uint64_t min, bool max_present, uint64_t max, bool is_64);
uint64_t wasmtime_memorytype_minimum(const(wasm_memorytype_t)* ty);
bool wasmtime_memorytype_maximum(const(wasm_memorytype_t)* ty, uint64_t* max);
bool wasmtime_memorytype_is64(const(wasm_memorytype_t)* ty);
bool wasmtime_memorytype_isshared(const(wasm_memorytype_t)* ty);
wasmtime_error_t* wasmtime_memory_new(wasmtime_context_t* store, const(wasm_memorytype_t)* ty, wasmtime_memory_t* ret);
wasm_memorytype_t* wasmtime_memory_type(const(wasmtime_context_t)* store, const(wasmtime_memory_t)* memory);
uint8_t* wasmtime_memory_data(const(wasmtime_context_t)* store, const(wasmtime_memory_t)* memory);
size_t wasmtime_memory_data_size(const(wasmtime_context_t)* store, const(wasmtime_memory_t)* memory);
uint64_t wasmtime_memory_size(const(wasmtime_context_t)* store, const(wasmtime_memory_t)* memory);
wasmtime_error_t* wasmtime_memory_grow(wasmtime_context_t* store, const(wasmtime_memory_t)* memory, uint64_t delta, uint64_t* prev_size);
void wasmtime_guestprofiler_delete(wasmtime_guestprofiler_t* guestprofiler);
wasmtime_guestprofiler_t* wasmtime_guestprofiler_new(const(wasm_name_t)* module_name, uint64_t interval_nanos, const(wasmtime_guestprofiler_modules_t)* modules, size_t modules_len);
void wasmtime_guestprofiler_sample(wasmtime_guestprofiler_t* guestprofiler, const(wasmtime_store_t)* store, uint64_t delta_nanos);
wasmtime_error_t* wasmtime_guestprofiler_finish(wasmtime_guestprofiler_t* guestprofiler, wasm_byte_vec_t* _out);
wasmtime_error_t* wasmtime_table_new(wasmtime_context_t* store, const(wasm_tabletype_t)* ty, const(wasmtime_val_t)* init, wasmtime_table_t *table);
wasm_tabletype_t* wasmtime_table_type(const(wasmtime_context_t)* store, const(wasmtime_table_t)* table);
bool wasmtime_table_get(wasmtime_context_t* store, const(wasmtime_table_t)* table, uint32_t index, wasmtime_val_t* val);
wasmtime_error_t* wasmtime_table_set(wasmtime_context_t* store, const(wasmtime_table_t)* table, uint32_t index, const(wasmtime_val_t)* value);
uint32_t wasmtime_table_size(const(wasmtime_context_t)* store, const(wasmtime_table_t)* table);
wasmtime_error_t* wasmtime_table_grow(wasmtime_context_t *store, const(wasmtime_table_t)* table, uint32_t delta, const(wasmtime_val_t)* init, uint32_t* prev_size);
wasm_trap_t* wasmtime_trap_new(const(char)* msg, size_t msg_len);
bool wasmtime_trap_code(const(wasm_trap_t)*, wasmtime_trap_code_t* code);
const(wasm_name_t)* wasmtime_frame_func_name(const(wasm_frame_t)*);
const(wasm_name_t)* wasmtime_frame_module_name(const(wasm_frame_t)*);
void wasmtime_config_async_support_set(wasm_config_t*, bool);
void wasmtime_config_async_stack_size_set(wasm_config_t*, uint64_t);
wasmtime_error_t* wasmtime_context_fuel_async_yield_interval(wasmtime_context_t* context, uint64_t interval);
wasmtime_error_t* wasmtime_context_epoch_deadline_async_yield_and_update(wasmtime_context_t* context, uint64_t delta);
bool wasmtime_call_future_poll(wasmtime_call_future_t* future);
void wasmtime_call_future_delete(wasmtime_call_future_t* future);
wasmtime_call_future_t* wasmtime_func_call_async(wasmtime_context_t* context, const(wasmtime_func_t)* func, const(wasmtime_val_t)* args, size_t nargs, wasmtime_val_t* results, size_t nresults, wasm_trap_t** trap_ret, wasmtime_error_t** error_ret);
wasmtime_error_t* wasmtime_linker_define_async_func(wasmtime_linker_t* linker, const(char)* _module, size_t module_len, const(char)* name, size_t name_len, const(wasm_functype_t)* ty, wasmtime_func_async_callback_t cb, void* data, wasmFinalizerFuncT);
wasmtime_call_future_t* wasmtime_linker_instantiate_async(const(wasmtime_linker_t)* linker, wasmtime_context_t* store, const(wasmtime_module_t)* _module, wasmtime_instance_t* instance, wasm_trap_t** trap_ret, wasmtime_error_t** error_ret);
wasmtime_call_future_t* wasmtime_instance_pre_instantiate_async(const(wasmtime_instance_pre_t)* instance_pre, wasmtime_context_t* store, wasmtime_instance_t* instance, wasm_trap_t** trap_ret, wasmtime_error_t** error_ret);
void wasmtime_config_host_stack_creator_set(wasm_config_t*, wasmtime_stack_creator_t*);
wasmtime_error_t* wasmtime_wat2wasm(const(char)* wat, size_t wat_len, wasm_byte_vec_t* ret);