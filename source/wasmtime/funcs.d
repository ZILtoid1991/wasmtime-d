module wasmtime.funcs;

public import wasmtime.types;
public import core.stdc.stdint;

import bindbc.loader;

extern(C) @nogc nothrow { 
    alias pwasm_byte_vec_new_empty = void function(wasm_byte_vec_t* _out);
    alias pwasm_byte_vec_new_uninitialized = void function(wasm_byte_vec_t* _out, size_t); 
    alias pwasm_byte_vec_new = void function(wasm_byte_vec_t* _out, size_t, const(wasm_byte_t)*); 
    alias pwasm_byte_vec_copy = void function(wasm_byte_vec_t* _out, const(wasm_byte_vec_t)*); 
    alias pwasm_byte_vec_delete = void function(wasm_byte_vec_t*);
    alias pwasm_config_delete = void function(wasm_config_t*);
    alias pwasm_config_new = wasm_config_t* function();
    alias pwasm_engine_delete = void function(wasm_engine_t*);
    alias pwasm_engine_new = wasm_engine_t* function();
    alias pwasm_engine_new_with_config = wasm_engine_t* function(wasm_config_t*);
    alias pwasm_store_delete = void function(wasm_store_t*);
    alias pwasm_store_new = wasm_store_t* function(wasm_engine_t*);
    alias pwasm_valtype_delete = void function(wasm_valtype_t*);
    alias pwasm_valtype_vec_new_empty = void function(wasm_valtype_vec_t* _out);
    alias pwasm_valtype_vec_new_uninitialized = void function(wasm_valtype_vec_t* _out, size_t);
    alias pwasm_valtype_vec_new = void function(wasm_valtype_vec_t* _out, size_t, const(wasm_valtype_t*)*); 
    alias pwasm_valtype_vec_copy = void function(wasm_valtype_vec_t* _out, const(wasm_valtype_vec_t)*);
    alias pwasm_valtype_vec_delete = void function(wasm_valtype_vec_t*);
    alias pwasm_valtype_copy = wasm_valtype_t* function(const(wasm_valtype_t)*);
    alias pwasm_valtype_new = wasm_valtype_t* function(wasm_valkind_t);
    alias pwasm_valtype_kind = wasm_valkind_t function(const(wasm_valtype_t)*);
    alias pwasm_functype_delete = void function(wasm_functype_t*); 
    alias pwasm_functype_vec_new_empty = void function(wasm_functype_vec_t* _out); 
    alias pwasm_functype_vec_new_uninitialized = void function(wasm_functype_vec_t* _out, size_t); 
    alias pwasm_functype_vec_new = void function(wasm_functype_vec_t* _out, size_t, const(wasm_functype_t*)*); 
    alias pwasm_functype_vec_copy = void function(wasm_functype_vec_t* _out, const(wasm_functype_vec_t)*);
    alias pwasm_functype_vec_delete = void function(wasm_functype_vec_t*);
    alias pwasm_functype_copy = wasm_functype_t* function(const(wasm_functype_t)*);
    alias pwasm_functype_new = wasm_functype_t* function(wasm_valtype_vec_t* params, wasm_valtype_vec_t* results);
    alias pwasm_functype_params = const(wasm_valtype_vec_t)* function(const(wasm_functype_t)*);
    alias pwasm_functype_results = const(wasm_valtype_vec_t)* function(const(wasm_functype_t)*);
    alias pwasm_globaltype_delete = void function(wasm_globaltype_t*);
    alias pwasm_globaltype_vec_new_empty = void function(wasm_globaltype_vec_t* _out); 
    alias pwasm_globaltype_vec_new_uninitialized = void function(wasm_globaltype_vec_t* _out, size_t); 
    alias pwasm_globaltype_vec_new = void function(wasm_globaltype_vec_t* _out, size_t, const(wasm_globaltype_t*)*); 
    alias pwasm_globaltype_vec_copy = void function(wasm_globaltype_vec_t* _out, const(wasm_globaltype_vec_t)*); 
    alias pwasm_globaltype_vec_delete = void function(wasm_globaltype_vec_t*);
    alias pwasm_globaltype_copy = wasm_globaltype_t* function(const(wasm_globaltype_t)*);
    alias pwasm_globaltype_new = wasm_globaltype_t* function(wasm_valtype_t*, wasm_mutability_t);
    alias pwasm_globaltype_content = const(wasm_valtype_t)* function(const(wasm_globaltype_t)*);
    alias pwasm_globaltype_mutability = wasm_mutability_t function(const(wasm_globaltype_t)*);
    alias pwasm_tabletype_delete = void function(wasm_tabletype_t*);
    alias pwasm_tabletype_vec_new_empty = void function(wasm_tabletype_vec_t* _out);
    alias pwasm_tabletype_vec_new_uninitialized = void function(wasm_tabletype_vec_t* _out, size_t); 
    alias pwasm_tabletype_vec_new = void function(wasm_tabletype_vec_t* _out, size_t, const(wasm_tabletype_t*)*); 
    alias pwasm_tabletype_vec_copy = void function(wasm_tabletype_vec_t* _out, const(wasm_tabletype_vec_t)*);
    alias pwasm_tabletype_vec_delete = void function(wasm_tabletype_vec_t*); 
    alias pwasm_tabletype_copy = wasm_tabletype_t* function(const(wasm_tabletype_t)*);
    alias pwasm_tabletype_new = wasm_tabletype_t* function(wasm_valtype_t*, const(wasm_limits_t)*);
    alias pwasm_tabletype_element = const(wasm_valtype_t)* function(const(wasm_tabletype_t)*);
    alias pwasm_tabletype_limits = const(wasm_limits_t)* function(const(wasm_tabletype_t)*);
    alias pwasm_memorytype_delete = void function(wasm_memorytype_t*);
    alias pwasm_memorytype_vec_new_empty = void function(wasm_memorytype_vec_t* _out); 
    alias pwasm_memorytype_vec_new_uninitialized = void function(wasm_memorytype_vec_t* _out, size_t);
    alias pwasm_memorytype_vec_new = void function(wasm_memorytype_vec_t* _out, size_t, const(wasm_memorytype_t*)*);
    alias pwasm_memorytype_vec_copy = void function(wasm_memorytype_vec_t* _out, const(wasm_memorytype_vec_t)*); 
    alias pwasm_memorytype_vec_delete = void function(wasm_memorytype_vec_t*);
    alias pwasm_memorytype_copy = wasm_memorytype_t* function(const(wasm_memorytype_t)*);
    alias pwasm_memorytype_new = wasm_memorytype_t* function(const(wasm_limits_t)*);
    alias pwasm_memorytype_limits = const(wasm_limits_t)* function(const(wasm_memorytype_t)*);
    alias pwasm_externtype_delete = void function(wasm_externtype_t*);
    alias pwasm_externtype_vec_new_empty = void function(wasm_externtype_vec_t* _out); 
    alias pwasm_externtype_vec_new_uninitialized = void function(wasm_externtype_vec_t* _out, size_t); 
    alias pwasm_externtype_vec_new = void function(wasm_externtype_vec_t* _out, size_t, const(wasm_externtype_t*)*); 
    alias pwasm_externtype_vec_copy = void function(wasm_externtype_vec_t* _out, const(wasm_externtype_vec_t)*);
    alias pwasm_externtype_vec_delete = void function(wasm_externtype_vec_t*);
    alias pwasm_externtype_copy = wasm_externtype_t* function(const(wasm_externtype_t)*);
    alias pwasm_externtype_kind = wasm_externkind_t function(const(wasm_externtype_t)*);
    alias pwasm_functype_as_externtype = wasm_externtype_t* function(wasm_functype_t*);
    alias pwasm_globaltype_as_externtype = wasm_externtype_t* function(wasm_globaltype_t*);
    alias pwasm_tabletype_as_externtype = wasm_externtype_t* function(wasm_tabletype_t*);
    alias pwasm_memorytype_as_externtype = wasm_externtype_t* function(wasm_memorytype_t*);
    alias pwasm_externtype_as_functype = wasm_functype_t* function(wasm_externtype_t*);
    alias pwasm_externtype_as_globaltype = wasm_globaltype_t* function(wasm_externtype_t*);
    alias pwasm_externtype_as_tabletype = wasm_tabletype_t* function(wasm_externtype_t*);
    alias pwasm_externtype_as_memorytype = wasm_memorytype_t* function(wasm_externtype_t*);
    alias pwasm_functype_as_externtype_const = const(wasm_externtype_t)* function(const(wasm_functype_t)*);
    alias pwasm_globaltype_as_externtype_const = const(wasm_externtype_t)* function(const(wasm_globaltype_t)*);
    alias pwasm_tabletype_as_externtype_const = const(wasm_externtype_t)* function(const(wasm_tabletype_t)*);
    alias pwasm_memorytype_as_externtype_const = const(wasm_externtype_t)* function(const(wasm_memorytype_t)*);
    alias pwasm_externtype_as_functype_const = const(wasm_functype_t)* function(const(wasm_externtype_t)*);
    alias pwasm_externtype_as_globaltype_const = const(wasm_globaltype_t)* function(const(wasm_externtype_t)*);
    alias pwasm_externtype_as_tabletype_const = const(wasm_tabletype_t)* function(const(wasm_externtype_t)*);
    alias pwasm_externtype_as_memorytype_const = const(wasm_memorytype_t)* function(const(wasm_externtype_t)*);
    alias pwasm_importtype_delete = void function(wasm_importtype_t*);
    alias pwasm_importtype_vec_new_empty = void function(wasm_importtype_vec_t* _out); 
    alias pwasm_importtype_vec_new_uninitialized = void function(wasm_importtype_vec_t* _out, size_t);
    alias pwasm_importtype_vec_new = void function(wasm_importtype_vec_t* _out, size_t, const(wasm_importtype_t*)*);
    alias pwasm_importtype_vec_copy = void function(wasm_importtype_vec_t* _out, const(wasm_importtype_vec_t)*);
    alias pwasm_importtype_vec_delete = void function(wasm_importtype_vec_t*);
    alias pwasm_importtype_copy = wasm_importtype_t* function(const(wasm_importtype_t)*);
    alias pwasm_importtype_new = wasm_importtype_t* function(wasm_name_t* _module, wasm_name_t* name, wasm_externtype_t*);
    alias pwasm_importtype_module = const(wasm_name_t)* function(const(wasm_importtype_t)*);
    alias pwasm_importtype_name = const(wasm_name_t)* function(const(wasm_importtype_t)*);
    alias pwasm_importtype_type = const(wasm_externtype_t)* function(const(wasm_importtype_t)*);
    alias pwasm_exporttype_delete = void function(wasm_exporttype_t*);
    alias pwasm_exporttype_vec_new_empty = void function(wasm_exporttype_vec_t* _out);
    alias pwasm_exporttype_vec_new_uninitialized = void function(wasm_exporttype_vec_t* _out, size_t);
    alias pwasm_exporttype_vec_new = void function(wasm_exporttype_vec_t* _out, size_t, const(wasm_exporttype_t*)*); 
    alias pwasm_exporttype_vec_copy = void function(wasm_exporttype_vec_t* _out, const(wasm_exporttype_vec_t)*);
    alias pwasm_exporttype_vec_delete = void function(wasm_exporttype_vec_t*);
    alias pwasm_exporttype_copy = wasm_exporttype_t* function(const(wasm_exporttype_t)*);
    alias pwasm_exporttype_new = wasm_exporttype_t* function(wasm_name_t*, wasm_externtype_t*);
    alias pwasm_exporttype_name = const(wasm_name_t)* function(const(wasm_exporttype_t)*);
    alias pwasm_exporttype_type = const(wasm_externtype_t)* function(const(wasm_exporttype_t)*);
    alias pwasm_val_delete = void function(wasm_val_t* v);
    alias pwasm_val_copy = void function(wasm_val_t* _out, const(wasm_val_t)*);
    alias pwasm_val_vec_new_empty = void function(wasm_val_vec_t* _out);
    alias pwasm_val_vec_new_uninitialized = void function(wasm_val_vec_t* _out, size_t); 
    alias pwasm_val_vec_new = void function(wasm_val_vec_t* _out, size_t, const(wasm_val_t)*);
    alias pwasm_val_vec_copy = void function(wasm_val_vec_t* _out, const(wasm_val_vec_t)*); 
    alias pwasm_val_vec_delete = void function(wasm_val_vec_t*);
    alias pwasm_ref_delete = void function(wasm_ref_t*);
    alias pwasm_ref_copy = wasm_ref_t* function(const(wasm_ref_t)*);
    alias pwasm_ref_same = bool function(const(wasm_ref_t)*, const(wasm_ref_t)*); 
    alias pwasm_ref_get_host_info = void* function(const(wasm_ref_t)*);
    alias pwasm_ref_set_host_info = void function(wasm_ref_t*, void*);
    alias pwasm_ref_set_host_info_with_finalizer = void function(wasm_ref_t*, void*, wasmFinalizerFuncT);
    alias pwasm_frame_delete = void function(wasm_frame_t*);
    alias pwasm_frame_vec_new_empty = void function(wasm_frame_vec_t* _out); 
    alias pwasm_frame_vec_new_uninitialized = void function(wasm_frame_vec_t* _out, size_t);
    alias pwasm_frame_vec_new = void function(wasm_frame_vec_t* _out, size_t, const(wasm_frame_t*)*); 
    alias pwasm_frame_vec_copy = void function(wasm_frame_vec_t* _out, const(wasm_frame_vec_t)*); 
    alias pwasm_frame_vec_delete = void function(wasm_frame_vec_t*);
    alias pwasm_frame_copy = wasm_frame_t* function(const(wasm_frame_t)*);
    alias pwasm_frame_instance = wasm_instance_t* function(const(wasm_frame_t)*);
    alias pwasm_frame_func_index = uint32_t function(const(wasm_frame_t)*);
    alias pwasm_frame_func_offset = size_t function(const(wasm_frame_t)*);
    alias pwasm_frame_module_offset = size_t function(const(wasm_frame_t)*);
    alias pwasm_trap_delete = void function(wasm_trap_t*);
    alias pwasm_trap_copy = wasm_trap_t* function(const(wasm_trap_t)*);
    alias pwasm_trap_same = bool function(const(wasm_trap_t)*, const(wasm_trap_t)*);
    alias pwasm_trap_get_host_info = void* function(const(wasm_trap_t)*);
    alias pwasm_trap_set_host_info = void function(wasm_trap_t*, void*);
    alias pwasm_trap_set_host_info_with_finalizer = void function(wasm_trap_t*, void*, wasmFinalizerFuncT);
    alias pwasm_trap_as_ref = wasm_ref_t* function(wasm_trap_t*);
    alias pwasm_ref_as_trap = wasm_trap_t* function(wasm_ref_t*);
    alias pwasm_trap_as_ref_const = const(wasm_ref_t)* function(const(wasm_trap_t)*);
    alias pwasm_ref_as_trap_const = const(wasm_trap_t)* function(const(wasm_ref_t)*);
    alias pwasm_trap_new = wasm_trap_t* function(wasm_store_t* store, const(wasm_message_t)*);
    alias pwasm_trap_message = void function(const(wasm_trap_t)*, wasm_message_t* _out);
    alias pwasm_trap_origin = wasm_frame_t* function(const(wasm_trap_t)*);
    alias pwasm_trap_trace = void function(const(wasm_trap_t)*, wasm_frame_vec_t* _out);
    alias pwasm_foreign_delete = void function(wasm_foreign_t*);
    alias pwasm_foreign_copy = wasm_foreign_t* function(const(wasm_foreign_t)*);
    alias pwasm_foreign_same = bool function(const(wasm_foreign_t)*, const(wasm_foreign_t)*);
    alias pwasm_foreign_get_host_info = void* function(const(wasm_foreign_t)*);
    alias pwasm_foreign_set_host_info = void function(wasm_foreign_t*, void*);
    alias pwasm_foreign_set_host_info_with_finalizer = void function(wasm_foreign_t*, void*, wasmFinalizerFuncT);
    alias pwasm_foreign_as_ref = wasm_ref_t* function(wasm_foreign_t*);
    alias pwasm_ref_as_foreign = wasm_foreign_t* function(wasm_ref_t*);
    alias pwasm_foreign_as_ref_const = const(wasm_ref_t)* function(const(wasm_foreign_t)*);
    alias pwasm_ref_as_foreign_const = const(wasm_foreign_t)* function(const(wasm_ref_t)*);
    alias pwasm_foreign_new = wasm_foreign_t* function(wasm_store_t*);
    alias pwasm_module_delete = void function(wasm_module_t*); 
    alias pwasm_module_copy = wasm_module_t* function(const(wasm_module_t)*);
    alias pwasm_module_same = bool function(const(wasm_module_t)*, const(wasm_module_t)*); 
    alias pwasm_module_get_host_info = void* function(const(wasm_module_t)*); 
    alias pwasm_module_set_host_info = void function(wasm_module_t*, void*);
    alias pwasm_module_set_host_info_with_finalizer = void function(wasm_module_t*, void*, wasmFinalizerFuncT);
    alias pwasm_module_as_ref = wasm_ref_t* function(wasm_module_t*);
    alias pwasm_ref_as_module = wasm_module_t* function(wasm_ref_t*);
    alias pwasm_module_as_ref_const = const(wasm_ref_t)* function(const(wasm_module_t)*);
    alias pwasm_ref_as_module_const = const(wasm_module_t)* function(const(wasm_ref_t)*);
    alias pwasm_shared_module_delete = void function(wasm_shared_module_t*);
    alias pwasm_module_share = wasm_shared_module_t* function(const(wasm_module_t)*);
    alias pwasm_module_obtain = wasm_module_t* function(wasm_store_t*, const(wasm_shared_module_t)*);
    alias pwasm_module_new = wasm_module_t* function(wasm_store_t*, const(wasm_byte_vec_t)* binary);
    alias pwasm_module_validate = bool function(wasm_store_t*, const(wasm_byte_vec_t)* binary);
    alias pwasm_module_imports = void function(const(wasm_module_t)*, wasm_importtype_vec_t* _out);
    alias pwasm_module_exports = void function(const(wasm_module_t)*, wasm_exporttype_vec_t* _out);
    alias pwasm_module_serialize = void function(const(wasm_module_t)*, wasm_byte_vec_t* _out);
    alias pwasm_module_deserialize = wasm_module_t* function(wasm_store_t*, const(wasm_byte_vec_t)*);
    alias pwasm_func_delete = void function(wasm_func_t*);
    alias pwasm_func_copy = wasm_func_t* function(const(wasm_func_t)*); 
    alias pwasm_func_same = bool function(const(wasm_func_t)*, const(wasm_func_t)*); 
    alias pwasm_func_get_host_info = void* function(const(wasm_func_t)*); 
    alias pwasm_func_set_host_info = void function(wasm_func_t*, void*);
    alias pwasm_func_set_host_info_with_finalizer = void function(wasm_func_t*, void*, wasmFinalizerFuncT); 
    alias pwasm_func_as_ref = wasm_ref_t* function(wasm_func_t*);
    alias pwasm_ref_as_func = wasm_func_t* function(wasm_ref_t*);
    alias pwasm_func_as_ref_const = const(wasm_ref_t)* function(const(wasm_func_t)*);
    alias pwasm_ref_as_func_const = const(wasm_func_t)* function(const(wasm_ref_t)*);
    alias pwasm_func_new = wasm_func_t* function(wasm_store_t*, const(wasm_functype_t)*, wasm_func_callback_t);
    alias pwasm_func_new_with_env = wasm_func_t* function(wasm_store_t*, const(wasm_functype_t)* type, wasm_func_callback_with_env_t, void* env, wasmFinalizerFuncT);
    alias pwasm_func_type = wasm_functype_t* function(const(wasm_func_t)*);
    alias pwasm_func_param_arity = size_t function(const(wasm_func_t)*);
    alias pwasm_func_result_arity = size_t function(const(wasm_func_t)*);
    alias pwasm_func_call = wasm_trap_t* function(const(wasm_func_t)*, const(wasm_val_vec_t)* args, wasm_val_vec_t* results);
    alias pwasm_global_delete = void function(wasm_global_t*);
    alias pwasm_global_copy = wasm_global_t* function(const(wasm_global_t)*); 
    alias pwasm_global_same = bool function(const(wasm_global_t)*, const(wasm_global_t)*); 
    alias pwasm_global_get_host_info = void* function(const(wasm_global_t)*);
    alias pwasm_global_set_host_info = void function(wasm_global_t*, void*);
    alias pwasm_global_set_host_info_with_finalizer = void function(wasm_global_t*, void*, wasmFinalizerFuncT);
    alias pwasm_global_as_ref = wasm_ref_t* function(wasm_global_t*);
    alias pwasm_ref_as_global = wasm_global_t* function(wasm_ref_t*);
    alias pwasm_global_as_ref_const = const(wasm_ref_t)* function(const(wasm_global_t)*);
    alias pwasm_ref_as_global_const = const(wasm_global_t)* function(const(wasm_ref_t)*);
    alias pwasm_global_new = wasm_global_t* function(wasm_store_t*, const(wasm_globaltype_t)*, const(wasm_val_t)*);
    alias pwasm_global_type = wasm_globaltype_t* function(const(wasm_global_t)*);
    alias pwasm_global_get = void function(const(wasm_global_t)*, wasm_val_t* _out);
    alias pwasm_global_set = void function(wasm_global_t*, const(wasm_val_t)*);
    alias pwasm_table_delete = void function(wasm_table_t*);
    alias pwasm_table_copy = wasm_table_t* function(const(wasm_table_t)*);
    alias pwasm_table_same = bool function(const(wasm_table_t)*, const(wasm_table_t)*);
    alias pwasm_table_get_host_info = void* function(const(wasm_table_t)*);
    alias pwasm_table_set_host_info = void function(wasm_table_t*, void*);
    alias pwasm_table_set_host_info_with_finalizer = void function(wasm_table_t*, void*, wasmFinalizerFuncT);
    alias pwasm_table_as_ref = wasm_ref_t* function(wasm_table_t*); 
    alias pwasm_ref_as_table = wasm_table_t* function(wasm_ref_t*); 
    alias pwasm_table_as_ref_const = const(wasm_ref_t)* function(const(wasm_table_t)*); 
    alias pwasm_ref_as_table_const = const(wasm_table_t)* function(const(wasm_ref_t)*);
    alias pwasm_table_new = wasm_table_t* function(wasm_store_t*, const(wasm_tabletype_t)*, wasm_ref_t* init);
    alias pwasm_table_type = wasm_tabletype_t* function(const(wasm_table_t)*);
    alias pwasm_table_get = wasm_ref_t* function(const(wasm_table_t)*, wasm_table_size_t index);
    alias pwasm_table_set = bool function(wasm_table_t*, wasm_table_size_t index, wasm_ref_t*);
    alias pwasm_table_size = wasm_table_size_t function(const(wasm_table_t)*);
    alias pwasm_table_grow = bool function(wasm_table_t*, wasm_table_size_t delta, wasm_ref_t* init);
    alias pwasm_memory_delete = void function(wasm_memory_t*);
    alias pwasm_memory_copy = wasm_memory_t* function(const(wasm_memory_t)*);
    alias pwasm_memory_same = bool function(const(wasm_memory_t)*, const(wasm_memory_t)*);
    alias pwasm_memory_get_host_info = void* function(const(wasm_memory_t)*);
    alias pwasm_memory_set_host_info = void function(wasm_memory_t*, void*);
    alias pwasm_memory_set_host_info_with_finalizer = void function(wasm_memory_t*, void*, wasmFinalizerFuncT);
    alias pwasm_memory_as_ref = wasm_ref_t* function(wasm_memory_t*);
    alias pwasm_ref_as_memory = wasm_memory_t* function(wasm_ref_t*);
    alias pwasm_memory_as_ref_const = const(wasm_ref_t)* function(const(wasm_memory_t)*);
    alias pwasm_ref_as_memory_const = const(wasm_memory_t)* function(const(wasm_ref_t)*);
    alias pwasm_memory_new = wasm_memory_t* function(wasm_store_t*, const(wasm_memorytype_t)*);
    alias pwasm_memory_type = wasm_memorytype_t* function(const(wasm_memory_t)*);
    alias pwasm_memory_data = byte_t* function(wasm_memory_t*);
    alias pwasm_memory_data_size = size_t function(const(wasm_memory_t)*);
    alias pwasm_memory_size = wasm_memory_pages_t function(const(wasm_memory_t)*);
    alias pwasm_memory_grow = bool function(wasm_memory_t*, wasm_memory_pages_t delta);
    alias pwasm_extern_delete = void function(wasm_extern_t*);
    alias pwasm_extern_copy = wasm_extern_t* function(const(wasm_extern_t)*); 
    alias pwasm_extern_same = bool function(const(wasm_extern_t)*, const(wasm_extern_t)*); 
    alias pwasm_extern_get_host_info = void* function(const(wasm_extern_t)*);
    alias pwasm_extern_set_host_info = void function(wasm_extern_t*, void*);
    alias pwasm_extern_set_host_info_with_finalizer = void function(wasm_extern_t*, void*, wasmFinalizerFuncT);
    alias pwasm_extern_as_ref = wasm_ref_t* function(wasm_extern_t*);
    alias pwasm_ref_as_extern = wasm_extern_t* function(wasm_ref_t*);
    alias pwasm_extern_as_ref_const = const(wasm_ref_t)* function(const(wasm_extern_t)*);
    alias pwasm_ref_as_extern_const = const(wasm_extern_t)* function(const(wasm_ref_t)*);
    alias pwasm_extern_vec_new_empty = void function(wasm_extern_vec_t* _out); 
    alias pwasm_extern_vec_new_uninitialized = void function(wasm_extern_vec_t* _out, size_t);
    alias pwasm_extern_vec_new = void function(wasm_extern_vec_t* _out, size_t, const(wasm_extern_t*)*);
    alias pwasm_extern_vec_copy = void function(wasm_extern_vec_t* _out, const(wasm_extern_vec_t)*);
    alias pwasm_extern_vec_delete = void function(wasm_extern_vec_t*);
    alias pwasm_extern_kind = wasm_externkind_t function(const(wasm_extern_t)*);
    alias pwasm_extern_type = wasm_externtype_t* function(const(wasm_extern_t)*);
    alias pwasm_func_as_extern = wasm_extern_t* function(wasm_func_t*);
    alias pwasm_global_as_extern = wasm_extern_t* function(wasm_global_t*);
    alias pwasm_table_as_extern = wasm_extern_t* function(wasm_table_t*);
    alias pwasm_memory_as_extern = wasm_extern_t* function(wasm_memory_t*);
    alias pwasm_extern_as_func = wasm_func_t* function(wasm_extern_t*);
    alias pwasm_extern_as_global = wasm_global_t* function(wasm_extern_t*);
    alias pwasm_extern_as_table = wasm_table_t* function(wasm_extern_t*);
    alias pwasm_extern_as_memory = wasm_memory_t* function(wasm_extern_t*);
    alias pwasm_func_as_extern_const = const(wasm_extern_t)* function(const(wasm_func_t)*);
    alias pwasm_global_as_extern_const = const(wasm_extern_t)* function(const(wasm_global_t)*);
    alias pwasm_table_as_extern_const = const(wasm_extern_t)* function(const(wasm_table_t)*);
    alias pwasm_memory_as_extern_const = const(wasm_extern_t)* function(const(wasm_memory_t)*);
    alias pwasm_extern_as_func_const = const(wasm_func_t)* function(const(wasm_extern_t)*);
    alias pwasm_extern_as_global_const = const(wasm_global_t)* function(const(wasm_extern_t)*);
    alias pwasm_extern_as_table_const = const(wasm_table_t)* function(const(wasm_extern_t)*);
    alias pwasm_extern_as_memory_const = const(wasm_memory_t)* function(const(wasm_extern_t)*);
    alias pwasm_instance_delete = void function(wasm_instance_t*);
    alias pwasm_instance_copy = wasm_instance_t* function(const(wasm_instance_t)*);
    alias pwasm_instance_same = bool function(const(wasm_instance_t)*, const(wasm_instance_t)*); 
    alias pwasm_instance_get_host_info = void* function(const(wasm_instance_t)*);
    alias pwasm_instance_set_host_info = void function(wasm_instance_t*, void*);
    alias pwasm_instance_set_host_info_with_finalizer = void function(wasm_instance_t*, void*, wasmFinalizerFuncT);
    alias pwasm_instance_as_ref = wasm_ref_t* function(wasm_instance_t*);
    alias pwasm_ref_as_instance = wasm_instance_t* function(wasm_ref_t*);
    alias pwasm_instance_as_ref_const = const(wasm_ref_t)* function(const(wasm_instance_t)*);
    alias pwasm_ref_as_instance_const = const(wasm_instance_t)* function(const(wasm_ref_t)*);
    alias pwasm_instance_new = wasm_instance_t* function(wasm_store_t*, const(wasm_module_t)*, const(wasm_extern_vec_t)* imports, wasm_trap_t**);
    alias pwasm_instance_exports = void function(const(wasm_instance_t)*, wasm_extern_vec_t* _out);
    alias pwasi_config_delete = void function(wasi_config_t*);
    alias pwasi_config_new = wasi_config_t* function();
    alias pwasi_config_set_argv = void function(wasi_config_t* config, int argc, const(char*)* argv);
    alias pwasi_config_inherit_argv = void function(wasi_config_t* config);
    alias pwasi_config_set_env = void function(wasi_config_t* config, int envc, const(char*)* names, const(char*)* values);
    alias pwasi_config_inherit_env = void function(wasi_config_t* config);
    alias pwasi_config_set_stdin_file = bool function(wasi_config_t* config, const(char)* path);
    alias pwasi_config_set_stdin_bytes = void function(wasi_config_t* config, wasm_byte_vec_t* binary);
    alias pwasi_config_inherit_stdin = void function(wasi_config_t* config);
    alias pwasi_config_set_stdout_file = bool function(wasi_config_t* config, const(char)* path);
    alias pwasi_config_inherit_stdout = void function(wasi_config_t* config);
    alias pwasi_config_set_stderr_file = bool function(wasi_config_t* config, const(char)* path);
    alias pwasi_config_inherit_stderr = void function(wasi_config_t* config);
    alias pwasi_config_preopen_dir = bool function(wasi_config_t *config, const(char)* path, const(char)* guest_path);
    alias pwasmtime_error_new = wasmtime_error_t* function(const(char)*);
    alias pwasmtime_error_delete = void function(wasmtime_error_t* error);
    alias pwasmtime_error_message = void function(const(wasmtime_error_t)* error, wasm_name_t* message);
    alias pwasmtime_error_exit_status = bool function(const(wasmtime_error_t)*, int* status);
    alias pwasmtime_error_wasm_trace = void function(const(wasmtime_error_t)*, wasm_frame_vec_t* _out);
    alias pwasmtime_config_debug_info_set = void function(wasm_config_t*, bool);
    alias pwasmtime_config_consume_fuel_set = void function(wasm_config_t*, bool);
    alias pwasmtime_config_epoch_interruption_set = void function(wasm_config_t*, bool);
    alias pwasmtime_config_max_wasm_stack_set = void function(wasm_config_t*, size_t);
    alias pwasmtime_config_wasm_threads_set = void function(wasm_config_t*, bool);
    alias pwasmtime_config_wasm_tail_call_set = void function(wasm_config_t*, bool);
    alias pwasmtime_config_wasm_reference_types_set = void function(wasm_config_t*, bool);
    alias pwasmtime_config_wasm_function_references_set = void function(wasm_config_t*, bool);
    alias pwasmtime_config_wasm_gc_set = void function(wasm_config_t*, bool);
    alias pwasmtime_config_wasm_simd_set = void function(wasm_config_t*, bool);
    alias pwasmtime_config_wasm_relaxed_simd_set = void function(wasm_config_t*, bool);
    alias pwasmtime_config_wasm_relaxed_simd_deterministic_set = void function(wasm_config_t*, bool);
    alias pwasmtime_config_wasm_bulk_memory_set = void function(wasm_config_t*, bool);
    alias pwasmtime_config_wasm_multi_value_set = void function(wasm_config_t*, bool);
    alias pwasmtime_config_wasm_multi_memory_set = void function(wasm_config_t*, bool);
    alias pwasmtime_config_wasm_memory64_set = void function(wasm_config_t*, bool);
    alias pwasmtime_config_strategy_set = void function(wasm_config_t*, wasmtime_strategy_t);
    alias pwasmtime_config_parallel_compilation_set = void function(wasm_config_t*, bool);
    alias pwasmtime_config_cranelift_debug_verifier_set = void function(wasm_config_t*, bool);
    alias pwasmtime_config_cranelift_nan_canonicalization_set = void function(wasm_config_t*, bool);
    alias pwasmtime_config_cranelift_opt_level_set = void function(wasm_config_t*, wasmtime_opt_level_t);
    alias pwasmtime_config_profiler_set = void function(wasm_config_t*, wasmtime_profiling_strategy_t);
    alias pwasmtime_config_static_memory_forced_set = void function(wasm_config_t*, bool);
    alias pwasmtime_config_static_memory_maximum_size_set = void function(wasm_config_t*, uint64_t);
    alias pwasmtime_config_static_memory_guard_size_set = void function(wasm_config_t*, uint64_t);
    alias pwasmtime_config_dynamic_memory_guard_size_set = void function(wasm_config_t*, uint64_t);
    alias pwasmtime_config_dynamic_memory_reserved_for_growth_set = void function(wasm_config_t*, uint64_t);
    alias pwasmtime_config_native_unwind_info_set = void function(wasm_config_t*, bool);
    alias pwasmtime_config_cache_config_load = wasmtime_error_t* function(wasm_config_t*, const(char)*);
    alias pwasmtime_config_target_set = wasmtime_error_t* function(wasm_config_t*, const(char)*);
    alias pwasmtime_config_cranelift_flag_enable = void function(wasm_config_t*, const(char)*);
    alias pwasmtime_config_cranelift_flag_set = void function(wasm_config_t*, const(char)* key, const(char)* value);
    alias pwasmtime_config_macos_use_mach_ports_set = void function(wasm_config_t*, bool);
    alias pwasmtime_config_host_memory_creator_set = void function(wasm_config_t*, wasmtime_memory_creator_t*);
    alias pwasmtime_config_memory_init_cow_set = void function(wasm_config_t*, bool);
    alias pwasmtime_engine_increment_epoch = void function(wasm_engine_t* engine);
    alias pwasmtime_module_new = wasmtime_error_t* function(wasm_engine_t* engine, const(uint8_t)* wasm, size_t wasm_len, wasmtime_module_t** ret);
    alias pwasmtime_module_delete = void function(wasmtime_module_t* m);
    alias pwasmtime_module_clone = wasmtime_module_t* function(wasmtime_module_t* m);
    alias pwasmtime_module_imports = void function(const(wasmtime_module_t)* _module, wasm_importtype_vec_t* _out);
    alias pwasmtime_module_exports = void function(const(wasmtime_module_t)* _module, wasm_exporttype_vec_t* _out);
    alias pwasmtime_module_validate = wasmtime_error_t* function(wasm_engine_t* engine, const(uint8_t)* wasm, size_t wasm_len);
    alias pwasmtime_module_serialize = wasmtime_error_t* function(wasmtime_module_t* _module, wasm_byte_vec_t* ret);
    alias pwasmtime_module_deserialize = wasmtime_error_t* function(wasm_engine_t* engine, const(uint8_t) *bytes, size_t bytes_len, wasmtime_module_t** ret);
    alias pwasmtime_module_deserialize_file = wasmtime_error_t* function(wasm_engine_t* engine, const(char)* path, wasmtime_module_t** ret);
    alias pwasmtime_module_image_range = void function(const(wasmtime_module_t)* _module, void** start, void** end);
    alias pwasmtime_sharedmemory_new = wasmtime_error_t* function(const(wasm_engine_t) *engine, const(wasm_memorytype_t)* ty, wasmtime_sharedmemory_t** ret);
    alias pwasmtime_sharedmemory_delete = void function(wasmtime_sharedmemory_t* memory);
    alias pwasmtime_sharedmemory_clone = wasmtime_sharedmemory_t* function(const(wasmtime_sharedmemory_t)* memory);
    alias pwasmtime_sharedmemory_type = wasm_memorytype_t* function(const(wasmtime_sharedmemory_t)* memory);
    alias pwasmtime_sharedmemory_data = uint8_t* function(const(wasmtime_sharedmemory_t)* memory);
    alias pwasmtime_sharedmemory_data_size = size_t function(const(wasmtime_sharedmemory_t)* memory);
    alias pwasmtime_sharedmemory_size = uint64_t function(const(wasmtime_sharedmemory_t)* memory);
    alias pwasmtime_sharedmemory_grow = wasmtime_error_t* function(const(wasmtime_sharedmemory_t)* memory, uint64_t delta, uint64_t* prev_size);
    alias pwasmtime_store_new = wasmtime_store_t* function(wasm_engine_t* engine, void* data, wasmFinalizerFuncT);
    alias pwasmtime_store_context = wasmtime_context_t* function(wasmtime_store_t* store);
    alias pwasmtime_store_limiter = void function(wasmtime_store_t* store, int64_t memory_size, int64_t table_elements, int64_t instances, int64_t tables, int64_t memories);
    alias pwasmtime_store_delete = void function(wasmtime_store_t* store);
    alias pwasmtime_context_get_data = void* function(const(wasmtime_context_t)* context);
    alias pwasmtime_context_set_data = void function(wasmtime_context_t* context, void* data);
    alias pwasmtime_context_gc = void function(wasmtime_context_t* context);
    alias pwasmtime_context_set_fuel = wasmtime_error_t* function(wasmtime_context_t* store, uint64_t fuel);
    alias pwasmtime_context_get_fuel = wasmtime_error_t* function(const(wasmtime_context_t)* context, uint64_t* fuel);
    alias pwasmtime_context_set_wasi = wasmtime_error_t* function(wasmtime_context_t* context, wasi_config_t* wasi);
    alias pwasmtime_context_set_epoch_deadline = void function(wasmtime_context_t* context, uint64_t ticks_beyond_current);
    alias pwasmtime_store_epoch_deadline_callback = void function(wasmtime_store_t* store, wasmSEDCFuncT func /* extern(C) wasmtime_error_t* function(wasmtime_context_t* context, void* data, uint64_t* epoch_deadline_delta, wasmtime_update_deadline_kind_t* update_kind) func */, void *data, wasmFinalizerFuncT);
    alias pwasmtime_extern_delete = void function(wasmtime_extern_t* val);
    alias pwasmtime_extern_type = wasm_externtype_t* function(wasmtime_context_t* context, wasmtime_extern_t* val);
    alias pwasmtime_anyref_clone = wasmtime_anyref_t* function(wasmtime_context_t* context, wasmtime_anyref_t* _ref);
    alias pwasmtime_anyref_delete = void function(wasmtime_context_t* context, wasmtime_anyref_t* _ref);
    alias pwasmtime_anyref_from_raw = wasmtime_anyref_t* function(wasmtime_context_t* context, uint32_t raw);
    alias pwasmtime_anyref_to_raw = uint32_t function(wasmtime_context_t* context, const(wasmtime_anyref_t)* _ref);
    alias pwasmtime_anyref_from_i31 = wasmtime_anyref_t* function(wasmtime_context_t* context, uint32_t i31val);
    alias pwasmtime_anyref_i31_get_u = bool function(wasmtime_context_t* context, wasmtime_anyref_t* anyref, uint32_t* dst);
    alias pwasmtime_anyref_i31_get_s = bool function(wasmtime_context_t* context, wasmtime_anyref_t* anyref, int32_t* dst);
    alias pwasmtime_externref_new = wasmtime_externref_t* function(wasmtime_context_t *context, void* data, wasmFinalizerFuncT);
    alias pwasmtime_externref_data = void* function(wasmtime_context_t* context, wasmtime_externref_t* data);
    alias pwasmtime_externref_clone = wasmtime_externref_t* function(wasmtime_context_t* context, wasmtime_externref_t* _ref);
    alias pwasmtime_externref_delete = void function(wasmtime_context_t* context, wasmtime_externref_t* _ref);
    alias pwasmtime_externref_from_raw = wasmtime_externref_t* function(wasmtime_context_t* context, uint32_t raw);
    alias pwasmtime_externref_to_raw = uint32_t function(wasmtime_context_t* context, const(wasmtime_externref_t)* _ref);
    alias pwasmtime_val_delete = void function(wasmtime_context_t* context, wasmtime_val_t* val);
    alias pwasmtime_val_copy = void function(wasmtime_context_t* context, wasmtime_val_t* dst, const(wasmtime_val_t)* src);
    alias pwasmtime_func_new = void function(wasmtime_context_t* store, const(wasm_functype_t)* type, wasmtime_func_callback_t callback, void* env, wasmFinalizerFuncT, wasmtime_func_t* ret);
    alias pwasmtime_func_new_unchecked = void function(wasmtime_context_t* store, const(wasm_functype_t)* type, wasmtime_func_unchecked_callback_t callback, void* env, wasmFinalizerFuncT, wasmtime_func_t* ret);
    alias pwasmtime_func_type = wasm_functype_t* function(const(wasmtime_context_t)* store,const(wasmtime_func_t) *func);
    alias pwasmtime_func_call = wasmtime_error_t* function(wasmtime_context_t* store, const(wasmtime_func_t)* func, const(wasmtime_val_t)* args, size_t nargs, wasmtime_val_t* results, size_t nresults, wasm_trap_t** trap);
    alias pwasmtime_func_call_unchecked = wasmtime_error_t* function(wasmtime_context_t* store, const(wasmtime_func_t)* func, wasmtime_val_raw_t* args_and_results,                           size_t args_and_results_len, wasm_trap_t **trap);
    alias pwasmtime_caller_export_get = bool function(wasmtime_caller_t* caller, const(char)* name, size_t name_len, wasmtime_extern_t* item);
    alias pwasmtime_caller_context = wasmtime_context_t* function(wasmtime_caller_t* caller);
    alias pwasmtime_func_from_raw = void function(wasmtime_context_t* context, void* raw, wasmtime_func_t* ret);
    alias pwasmtime_func_to_raw = void* function(wasmtime_context_t* context, const(wasmtime_func_t)* func);
    alias pwasmtime_global_new = wasmtime_error_t* function(wasmtime_context_t* store, const(wasm_globaltype_t)* type, const(wasmtime_val_t)* val, wasmtime_global_t* ret);
    alias pwasmtime_global_type = wasm_globaltype_t* function(const(wasmtime_context_t)* store, const(wasmtime_global_t)* global);
    alias pwasmtime_global_get = void function(wasmtime_context_t* store, const(wasmtime_global_t)* global, wasmtime_val_t* _out);
    alias pwasmtime_global_set = wasmtime_error_t* function(wasmtime_context_t* store, const(wasmtime_global_t)* global, const(wasmtime_val_t)* val);
    alias pwasmtime_instance_new = wasmtime_error_t* function(wasmtime_context_t* store, const(wasmtime_module_t)* _module, const(wasmtime_extern_t)* imports, size_t nimports, wasmtime_instance_t* instance, wasm_trap_t** trap);
    alias pwasmtime_instance_export_get = bool function(wasmtime_context_t* store, const(wasmtime_instance_t)* instance, const(char)* name, size_t name_len, wasmtime_extern_t* item);
    alias pwasmtime_instance_export_nth = bool function(wasmtime_context_t* store, const(wasmtime_instance_t)* instance, size_t index, char** name, size_t* name_len, wasmtime_extern_t* item);
    alias pwasmtime_instance_pre_delete = void function(wasmtime_instance_pre_t* instance_pre);
    alias pwasmtime_instance_pre_instantiate = wasmtime_error_t* function(const(wasmtime_instance_pre_t)* instance_pre, wasmtime_store_t* store, wasmtime_instance_t* instance, wasm_trap_t** trap_ptr);
    alias pwasmtime_instance_pre_module = wasmtime_module_t* function(wasmtime_instance_pre_t* instance_pre);
    alias pwasmtime_linker_new = wasmtime_linker_t* function(wasm_engine_t* engine);
    alias pwasmtime_linker_clone = wasmtime_linker_t* function(wasmtime_linker_t* linker);
    alias pwasmtime_linker_delete = void function(wasmtime_linker_t* linker);
    alias pwasmtime_linker_allow_shadowing = void function(wasmtime_linker_t* linker, bool allow_shadowing);
    alias pwasmtime_linker_define = wasmtime_error_t* function(wasmtime_linker_t* linker, wasmtime_context_t* store, const(char)* _module, size_t module_len, const(char)* name, size_t name_len, const(wasmtime_extern_t)* item);
    alias pwasmtime_linker_define_func = wasmtime_error_t* function(wasmtime_linker_t* linker, const(char)* _module, size_t module_len, const(char)* name, size_t name_len, const(wasm_functype_t)* ty, wasmtime_func_callback_t cb, void *data, wasmFinalizerFuncT);
    alias pwasmtime_linker_define_func_unchecked = wasmtime_error_t* function(wasmtime_linker_t* linker, const(char)* _module, size_t module_len, const(char)* name, size_t name_len, const(wasm_functype_t)* ty, wasmtime_func_unchecked_callback_t cb, void* data, wasmFinalizerFuncT);
    alias pwasmtime_linker_define_wasi = wasmtime_error_t* function(wasmtime_linker_t* linker);
    alias pwasmtime_linker_define_instance = wasmtime_error_t* function(wasmtime_linker_t* linker, wasmtime_context_t* store, const(char)* name, size_t name_len, const(wasmtime_instance_t)* instance);
    alias pwasmtime_linker_instantiate = wasmtime_error_t* function(const(wasmtime_linker_t)* linker, wasmtime_context_t* store, const(wasmtime_module_t)* _module, wasmtime_instance_t* instance, wasm_trap_t** trap);
    alias pwasmtime_linker_module = wasmtime_error_t* function(wasmtime_linker_t* linker, wasmtime_context_t* store, const(char)* name, size_t name_len, const(wasmtime_module_t)* _module);
    alias pwasmtime_linker_get_default = wasmtime_error_t* function(const(wasmtime_linker_t)* linker, wasmtime_context_t* store, const(char)* name, size_t name_len, wasmtime_func_t* func);
    alias pwasmtime_linker_get = bool function(const(wasmtime_linker_t)* linker, wasmtime_context_t* store, const(char)* _module, size_t module_len, const(char)* name, size_t name_len, wasmtime_extern_t* item);
    alias pwasmtime_linker_instantiate_pre = wasmtime_error_t* function(const(wasmtime_linker_t)* linker, const(wasmtime_module_t)* _module, wasmtime_instance_pre_t** instance_pre);
    alias pwasmtime_memorytype_new = wasm_memorytype_t* function(uint64_t min, bool max_present, uint64_t max, bool is_64);
    alias pwasmtime_memorytype_minimum = uint64_t function(const(wasm_memorytype_t)* ty);
    alias pwasmtime_memorytype_maximum = bool function(const(wasm_memorytype_t)* ty, uint64_t* max);
    alias pwasmtime_memorytype_is64 = bool function(const(wasm_memorytype_t)* ty);
    alias pwasmtime_memorytype_isshared = bool function(const(wasm_memorytype_t)* ty);
    alias pwasmtime_memory_new = wasmtime_error_t* function(wasmtime_context_t* store, const(wasm_memorytype_t)* ty, wasmtime_memory_t* ret);
    alias pwasmtime_memory_type = wasm_memorytype_t* function(const(wasmtime_context_t)* store, const(wasmtime_memory_t)* memory);
    alias pwasmtime_memory_data = uint8_t* function(const(wasmtime_context_t)* store, const(wasmtime_memory_t)* memory);
    alias pwasmtime_memory_data_size = size_t function(const(wasmtime_context_t)* store, const(wasmtime_memory_t)* memory);
    alias pwasmtime_memory_size = uint64_t function(const(wasmtime_context_t)* store, const(wasmtime_memory_t)* memory);
    alias pwasmtime_memory_grow = wasmtime_error_t* function(wasmtime_context_t* store, const(wasmtime_memory_t)* memory, uint64_t delta, uint64_t* prev_size);
    alias pwasmtime_guestprofiler_delete = void function(wasmtime_guestprofiler_t* guestprofiler);
    alias pwasmtime_guestprofiler_new = wasmtime_guestprofiler_t* function(const(wasm_name_t)* module_name, uint64_t interval_nanos, const(wasmtime_guestprofiler_modules_t)* modules, size_t modules_len);
    alias pwasmtime_guestprofiler_sample = void function(wasmtime_guestprofiler_t* guestprofiler, const(wasmtime_store_t)* store, uint64_t delta_nanos);
    alias pwasmtime_guestprofiler_finish = wasmtime_error_t* function(wasmtime_guestprofiler_t* guestprofiler, wasm_byte_vec_t* _out);
    alias pwasmtime_table_new = wasmtime_error_t* function(wasmtime_context_t* store, const(wasm_tabletype_t)* ty, const(wasmtime_val_t)* init, wasmtime_table_t *table);
    alias pwasmtime_table_type = wasm_tabletype_t* function(const(wasmtime_context_t)* store, const(wasmtime_table_t)* table);
    alias pwasmtime_table_get = bool function(wasmtime_context_t* store, const(wasmtime_table_t)* table, uint32_t index, wasmtime_val_t* val);
    alias pwasmtime_table_set = wasmtime_error_t* function(wasmtime_context_t* store, const(wasmtime_table_t)* table, uint32_t index, const(wasmtime_val_t)* value);
    alias pwasmtime_table_size = uint32_t function(const(wasmtime_context_t)* store, const(wasmtime_table_t)* table);
    alias pwasmtime_table_grow = wasmtime_error_t* function(wasmtime_context_t *store, const(wasmtime_table_t)* table, uint32_t delta, const(wasmtime_val_t)* init, uint32_t* prev_size);
    alias pwasmtime_trap_new = wasm_trap_t* function(const(char)* msg, size_t msg_len);
    alias pwasmtime_trap_code = bool function(const(wasm_trap_t)*, wasmtime_trap_code_t* code);
    alias pwasmtime_frame_func_name = const(wasm_name_t)* function(const(wasm_frame_t)*);
    alias pwasmtime_frame_module_name = const(wasm_name_t)* function(const(wasm_frame_t)*);
    alias pwasmtime_config_async_support_set = void function(wasm_config_t*, bool);
    alias pwasmtime_config_async_stack_size_set = void function(wasm_config_t*, uint64_t);
    alias pwasmtime_context_fuel_async_yield_interval = wasmtime_error_t* function(wasmtime_context_t* context, uint64_t interval);
    alias pwasmtime_context_epoch_deadline_async_yield_and_update = wasmtime_error_t* function(wasmtime_context_t* context, uint64_t delta);
    alias pwasmtime_call_future_poll = bool function(wasmtime_call_future_t* future);
    alias pwasmtime_call_future_delete = void function(wasmtime_call_future_t* future);
    alias pwasmtime_func_call_async = wasmtime_call_future_t* function(wasmtime_context_t* context, const(wasmtime_func_t)* func, const(wasmtime_val_t)* args, size_t nargs, wasmtime_val_t* results, size_t nresults, wasm_trap_t** trap_ret, wasmtime_error_t** error_ret);
    alias pwasmtime_linker_define_async_func = wasmtime_error_t* function(wasmtime_linker_t* linker, const(char)* _module, size_t module_len, const(char)* name, size_t name_len, const(wasm_functype_t)* ty, wasmtime_func_async_callback_t cb, void* data, wasmFinalizerFuncT);
    alias pwasmtime_linker_instantiate_async = wasmtime_call_future_t* function(const(wasmtime_linker_t)* linker, wasmtime_context_t* store, const(wasmtime_module_t)* _module, wasmtime_instance_t* instance, wasm_trap_t** trap_ret, wasmtime_error_t** error_ret);
    alias pwasmtime_instance_pre_instantiate_async = wasmtime_call_future_t* function(const(wasmtime_instance_pre_t)* instance_pre, wasmtime_context_t* store, wasmtime_instance_t* instance, wasm_trap_t** trap_ret, wasmtime_error_t** error_ret);
    alias pwasmtime_config_host_stack_creator_set = void function(wasm_config_t*, wasmtime_stack_creator_t*);
    alias pwasmtime_wat2wasm = wasmtime_error_t* function(const(char)* wat, size_t wat_len, wasm_byte_vec_t* ret);
}
__gshared { 
    pwasm_byte_vec_new_empty wasm_byte_vec_new_empty;
    pwasm_byte_vec_new_uninitialized wasm_byte_vec_new_uninitialized;
    pwasm_byte_vec_new wasm_byte_vec_new;
    pwasm_byte_vec_copy wasm_byte_vec_copy;
    pwasm_byte_vec_delete wasm_byte_vec_delete;
    pwasm_config_delete wasm_config_delete;
    pwasm_config_new wasm_config_new;
    pwasm_engine_delete wasm_engine_delete;
    pwasm_engine_new wasm_engine_new;
    pwasm_engine_new_with_config wasm_engine_new_with_config;
    pwasm_store_delete wasm_store_delete;
    pwasm_store_new wasm_store_new;
    pwasm_valtype_delete wasm_valtype_delete;
    pwasm_valtype_vec_new_empty wasm_valtype_vec_new_empty;
    pwasm_valtype_vec_new_uninitialized wasm_valtype_vec_new_uninitialized;
    pwasm_valtype_vec_new wasm_valtype_vec_new;
    pwasm_valtype_vec_copy wasm_valtype_vec_copy;
    pwasm_valtype_vec_delete wasm_valtype_vec_delete;
    pwasm_valtype_copy wasm_valtype_copy;
    pwasm_valtype_new wasm_valtype_new;
    pwasm_valtype_kind wasm_valtype_kind;
    pwasm_functype_delete wasm_functype_delete;
    pwasm_functype_vec_new_empty wasm_functype_vec_new_empty;
    pwasm_functype_vec_new_uninitialized wasm_functype_vec_new_uninitialized;
    pwasm_functype_vec_new wasm_functype_vec_new;
    pwasm_functype_vec_copy wasm_functype_vec_copy;
    pwasm_functype_vec_delete wasm_functype_vec_delete;
    pwasm_functype_copy wasm_functype_copy;
    pwasm_functype_new wasm_functype_new;
    pwasm_functype_params wasm_functype_params;
    pwasm_functype_results wasm_functype_results;
    pwasm_globaltype_delete wasm_globaltype_delete;
    pwasm_globaltype_vec_new_empty wasm_globaltype_vec_new_empty;
    pwasm_globaltype_vec_new_uninitialized wasm_globaltype_vec_new_uninitialized;
    pwasm_globaltype_vec_new wasm_globaltype_vec_new;
    pwasm_globaltype_vec_copy wasm_globaltype_vec_copy;
    pwasm_globaltype_vec_delete wasm_globaltype_vec_delete;
    pwasm_globaltype_copy wasm_globaltype_copy;
    pwasm_globaltype_new wasm_globaltype_new;
    pwasm_globaltype_content wasm_globaltype_content;
    pwasm_globaltype_mutability wasm_globaltype_mutability;
    pwasm_tabletype_delete wasm_tabletype_delete;
    pwasm_tabletype_vec_new_empty wasm_tabletype_vec_new_empty;
    pwasm_tabletype_vec_new_uninitialized wasm_tabletype_vec_new_uninitialized;
    pwasm_tabletype_vec_new wasm_tabletype_vec_new;
    pwasm_tabletype_vec_copy wasm_tabletype_vec_copy;
    pwasm_tabletype_vec_delete wasm_tabletype_vec_delete;
    pwasm_tabletype_copy wasm_tabletype_copy;
    pwasm_tabletype_new wasm_tabletype_new;
    pwasm_tabletype_element wasm_tabletype_element;
    pwasm_tabletype_limits wasm_tabletype_limits;
    pwasm_memorytype_delete wasm_memorytype_delete;
    pwasm_memorytype_vec_new_empty wasm_memorytype_vec_new_empty;
    pwasm_memorytype_vec_new_uninitialized wasm_memorytype_vec_new_uninitialized;
    pwasm_memorytype_vec_new wasm_memorytype_vec_new;
    pwasm_memorytype_vec_copy wasm_memorytype_vec_copy;
    pwasm_memorytype_vec_delete wasm_memorytype_vec_delete;
    pwasm_memorytype_copy wasm_memorytype_copy;
    pwasm_memorytype_new wasm_memorytype_new;
    pwasm_memorytype_limits wasm_memorytype_limits;
    pwasm_externtype_delete wasm_externtype_delete;
    pwasm_externtype_vec_new_empty wasm_externtype_vec_new_empty;
    pwasm_externtype_vec_new_uninitialized wasm_externtype_vec_new_uninitialized;
    pwasm_externtype_vec_new wasm_externtype_vec_new;
    pwasm_externtype_vec_copy wasm_externtype_vec_copy;
    pwasm_externtype_vec_delete wasm_externtype_vec_delete;
    pwasm_externtype_copy wasm_externtype_copy;
    pwasm_externtype_kind wasm_externtype_kind;
    pwasm_functype_as_externtype wasm_functype_as_externtype;
    pwasm_globaltype_as_externtype wasm_globaltype_as_externtype;
    pwasm_tabletype_as_externtype wasm_tabletype_as_externtype;
    pwasm_memorytype_as_externtype wasm_memorytype_as_externtype;
    pwasm_externtype_as_functype wasm_externtype_as_functype;
    pwasm_externtype_as_globaltype wasm_externtype_as_globaltype;
    pwasm_externtype_as_tabletype wasm_externtype_as_tabletype;
    pwasm_externtype_as_memorytype wasm_externtype_as_memorytype;
    pwasm_functype_as_externtype_const wasm_functype_as_externtype_const;
    pwasm_globaltype_as_externtype_const wasm_globaltype_as_externtype_const;
    pwasm_tabletype_as_externtype_const wasm_tabletype_as_externtype_const;
    pwasm_memorytype_as_externtype_const wasm_memorytype_as_externtype_const;
    pwasm_externtype_as_functype_const wasm_externtype_as_functype_const;
    pwasm_externtype_as_globaltype_const wasm_externtype_as_globaltype_const;
    pwasm_externtype_as_tabletype_const wasm_externtype_as_tabletype_const;
    pwasm_externtype_as_memorytype_const wasm_externtype_as_memorytype_const;
    pwasm_importtype_delete wasm_importtype_delete;
    pwasm_importtype_vec_new_empty wasm_importtype_vec_new_empty;
    pwasm_importtype_vec_new_uninitialized wasm_importtype_vec_new_uninitialized;
    pwasm_importtype_vec_new wasm_importtype_vec_new;
    pwasm_importtype_vec_copy wasm_importtype_vec_copy;
    pwasm_importtype_vec_delete wasm_importtype_vec_delete;
    pwasm_importtype_copy wasm_importtype_copy;
    pwasm_importtype_new wasm_importtype_new;
    pwasm_importtype_module wasm_importtype_module;
    pwasm_importtype_name wasm_importtype_name;
    pwasm_importtype_type wasm_importtype_type;
    pwasm_exporttype_delete wasm_exporttype_delete;
    pwasm_exporttype_vec_new_empty wasm_exporttype_vec_new_empty;
    pwasm_exporttype_vec_new_uninitialized wasm_exporttype_vec_new_uninitialized;
    pwasm_exporttype_vec_new wasm_exporttype_vec_new;
    pwasm_exporttype_vec_copy wasm_exporttype_vec_copy;
    pwasm_exporttype_vec_delete wasm_exporttype_vec_delete;
    pwasm_exporttype_copy wasm_exporttype_copy;
    pwasm_exporttype_new wasm_exporttype_new;
    pwasm_exporttype_name wasm_exporttype_name;
    pwasm_exporttype_type wasm_exporttype_type;
    pwasm_val_delete wasm_val_delete;
    pwasm_val_copy wasm_val_copy;
    pwasm_val_vec_new_empty wasm_val_vec_new_empty;
    pwasm_val_vec_new_uninitialized wasm_val_vec_new_uninitialized;
    pwasm_val_vec_new wasm_val_vec_new;
    pwasm_val_vec_copy wasm_val_vec_copy;
    pwasm_val_vec_delete wasm_val_vec_delete;
    pwasm_ref_delete wasm_ref_delete;
    pwasm_ref_copy wasm_ref_copy;
    pwasm_ref_same wasm_ref_same;
    pwasm_ref_get_host_info wasm_ref_get_host_info;
    pwasm_ref_set_host_info wasm_ref_set_host_info;
    pwasm_ref_set_host_info_with_finalizer wasm_ref_set_host_info_with_finalizer;
    pwasm_frame_delete wasm_frame_delete;
    pwasm_frame_vec_new_empty wasm_frame_vec_new_empty;
    pwasm_frame_vec_new_uninitialized wasm_frame_vec_new_uninitialized;
    pwasm_frame_vec_new wasm_frame_vec_new;
    pwasm_frame_vec_copy wasm_frame_vec_copy;
    pwasm_frame_vec_delete wasm_frame_vec_delete;
    pwasm_frame_copy wasm_frame_copy;
    pwasm_frame_instance wasm_frame_instance;
    pwasm_frame_func_index wasm_frame_func_index;
    pwasm_frame_func_offset wasm_frame_func_offset;
    pwasm_frame_module_offset wasm_frame_module_offset;
    pwasm_trap_delete wasm_trap_delete;
    pwasm_trap_copy wasm_trap_copy;
    pwasm_trap_same wasm_trap_same;
    pwasm_trap_get_host_info wasm_trap_get_host_info;
    pwasm_trap_set_host_info wasm_trap_set_host_info;
    pwasm_trap_set_host_info_with_finalizer wasm_trap_set_host_info_with_finalizer;
    pwasm_trap_as_ref wasm_trap_as_ref;
    pwasm_ref_as_trap wasm_ref_as_trap;
    pwasm_trap_as_ref_const wasm_trap_as_ref_const;
    pwasm_ref_as_trap_const wasm_ref_as_trap_const;
    pwasm_trap_new wasm_trap_new;
    pwasm_trap_message wasm_trap_message;
    pwasm_trap_origin wasm_trap_origin;
    pwasm_trap_trace wasm_trap_trace;
    pwasm_foreign_delete wasm_foreign_delete;
    pwasm_foreign_copy wasm_foreign_copy;
    pwasm_foreign_same wasm_foreign_same;
    pwasm_foreign_get_host_info wasm_foreign_get_host_info;
    pwasm_foreign_set_host_info wasm_foreign_set_host_info;
    pwasm_foreign_set_host_info_with_finalizer wasm_foreign_set_host_info_with_finalizer;
    pwasm_foreign_as_ref wasm_foreign_as_ref;
    pwasm_ref_as_foreign wasm_ref_as_foreign;
    pwasm_foreign_as_ref_const wasm_foreign_as_ref_const;
    pwasm_ref_as_foreign_const wasm_ref_as_foreign_const;
    pwasm_foreign_new wasm_foreign_new;
    pwasm_module_delete wasm_module_delete;
    pwasm_module_copy wasm_module_copy;
    pwasm_module_same wasm_module_same;
    pwasm_module_get_host_info wasm_module_get_host_info;
    pwasm_module_set_host_info wasm_module_set_host_info;
    pwasm_module_set_host_info_with_finalizer wasm_module_set_host_info_with_finalizer;
    pwasm_module_as_ref wasm_module_as_ref;
    pwasm_ref_as_module wasm_ref_as_module;
    pwasm_module_as_ref_const wasm_module_as_ref_const;
    pwasm_ref_as_module_const wasm_ref_as_module_const;
    pwasm_shared_module_delete wasm_shared_module_delete;
    pwasm_module_share wasm_module_share;
    pwasm_module_obtain wasm_module_obtain;
    pwasm_module_new wasm_module_new;
    pwasm_module_validate wasm_module_validate;
    pwasm_module_imports wasm_module_imports;
    pwasm_module_exports wasm_module_exports;
    pwasm_module_serialize wasm_module_serialize;
    pwasm_module_deserialize wasm_module_deserialize;
    pwasm_func_delete wasm_func_delete;
    pwasm_func_copy wasm_func_copy;
    pwasm_func_same wasm_func_same;
    pwasm_func_get_host_info wasm_func_get_host_info;
    pwasm_func_set_host_info wasm_func_set_host_info;
    pwasm_func_set_host_info_with_finalizer wasm_func_set_host_info_with_finalizer;
    pwasm_func_as_ref wasm_func_as_ref;
    pwasm_ref_as_func wasm_ref_as_func;
    pwasm_func_as_ref_const wasm_func_as_ref_const;
    pwasm_ref_as_func_const wasm_ref_as_func_const;
    pwasm_func_new wasm_func_new;
    pwasm_func_new_with_env wasm_func_new_with_env;
    pwasm_func_type wasm_func_type;
    pwasm_func_param_arity wasm_func_param_arity;
    pwasm_func_result_arity wasm_func_result_arity;
    pwasm_func_call wasm_func_call;
    pwasm_global_delete wasm_global_delete;
    pwasm_global_copy wasm_global_copy;
    pwasm_global_same wasm_global_same;
    pwasm_global_get_host_info wasm_global_get_host_info;
    pwasm_global_set_host_info wasm_global_set_host_info;
    pwasm_global_set_host_info_with_finalizer wasm_global_set_host_info_with_finalizer;
    pwasm_global_as_ref wasm_global_as_ref;
    pwasm_ref_as_global wasm_ref_as_global;
    pwasm_global_as_ref_const wasm_global_as_ref_const;
    pwasm_ref_as_global_const wasm_ref_as_global_const;
    pwasm_global_new wasm_global_new;
    pwasm_global_type wasm_global_type;
    pwasm_global_get wasm_global_get;
    pwasm_global_set wasm_global_set;
    pwasm_table_delete wasm_table_delete;
    pwasm_table_copy wasm_table_copy;
    pwasm_table_same wasm_table_same;
    pwasm_table_get_host_info wasm_table_get_host_info;
    pwasm_table_set_host_info wasm_table_set_host_info;
    pwasm_table_set_host_info_with_finalizer wasm_table_set_host_info_with_finalizer;
    pwasm_table_as_ref wasm_table_as_ref;
    pwasm_ref_as_table wasm_ref_as_table;
    pwasm_table_as_ref_const wasm_table_as_ref_const;
    pwasm_ref_as_table_const wasm_ref_as_table_const;
    pwasm_table_new wasm_table_new;
    pwasm_table_type wasm_table_type;
    pwasm_table_get wasm_table_get;
    pwasm_table_set wasm_table_set;
    pwasm_table_size wasm_table_size;
    pwasm_table_grow wasm_table_grow;
    pwasm_memory_delete wasm_memory_delete;
    pwasm_memory_copy wasm_memory_copy;
    pwasm_memory_same wasm_memory_same;
    pwasm_memory_get_host_info wasm_memory_get_host_info;
    pwasm_memory_set_host_info wasm_memory_set_host_info;
    pwasm_memory_set_host_info_with_finalizer wasm_memory_set_host_info_with_finalizer;
    pwasm_memory_as_ref wasm_memory_as_ref;
    pwasm_ref_as_memory wasm_ref_as_memory;
    pwasm_memory_as_ref_const wasm_memory_as_ref_const;
    pwasm_ref_as_memory_const wasm_ref_as_memory_const;
    pwasm_memory_new wasm_memory_new;
    pwasm_memory_type wasm_memory_type;
    pwasm_memory_data wasm_memory_data;
    pwasm_memory_data_size wasm_memory_data_size;
    pwasm_memory_size wasm_memory_size;
    pwasm_memory_grow wasm_memory_grow;
    pwasm_extern_delete wasm_extern_delete;
    pwasm_extern_copy wasm_extern_copy;
    pwasm_extern_same wasm_extern_same;
    pwasm_extern_get_host_info wasm_extern_get_host_info;
    pwasm_extern_set_host_info wasm_extern_set_host_info;
    pwasm_extern_set_host_info_with_finalizer wasm_extern_set_host_info_with_finalizer;
    pwasm_extern_as_ref wasm_extern_as_ref;
    pwasm_ref_as_extern wasm_ref_as_extern;
    pwasm_extern_as_ref_const wasm_extern_as_ref_const;
    pwasm_ref_as_extern_const wasm_ref_as_extern_const;
    pwasm_extern_vec_new_empty wasm_extern_vec_new_empty;
    pwasm_extern_vec_new_uninitialized wasm_extern_vec_new_uninitialized;
    pwasm_extern_vec_new wasm_extern_vec_new;
    pwasm_extern_vec_copy wasm_extern_vec_copy;
    pwasm_extern_vec_delete wasm_extern_vec_delete;
    pwasm_extern_kind wasm_extern_kind;
    pwasm_extern_type wasm_extern_type;
    pwasm_func_as_extern wasm_func_as_extern;
    pwasm_global_as_extern wasm_global_as_extern;
    pwasm_table_as_extern wasm_table_as_extern;
    pwasm_memory_as_extern wasm_memory_as_extern;
    pwasm_extern_as_func wasm_extern_as_func;
    pwasm_extern_as_global wasm_extern_as_global;
    pwasm_extern_as_table wasm_extern_as_table;
    pwasm_extern_as_memory wasm_extern_as_memory;
    pwasm_func_as_extern_const wasm_func_as_extern_const;
    pwasm_global_as_extern_const wasm_global_as_extern_const;
    pwasm_table_as_extern_const wasm_table_as_extern_const;
    pwasm_memory_as_extern_const wasm_memory_as_extern_const;
    pwasm_extern_as_func_const wasm_extern_as_func_const;
    pwasm_extern_as_global_const wasm_extern_as_global_const;
    pwasm_extern_as_table_const wasm_extern_as_table_const;
    pwasm_extern_as_memory_const wasm_extern_as_memory_const;
    pwasm_instance_delete wasm_instance_delete;
    pwasm_instance_copy wasm_instance_copy;
    pwasm_instance_same wasm_instance_same;
    pwasm_instance_get_host_info wasm_instance_get_host_info;
    pwasm_instance_set_host_info wasm_instance_set_host_info;
    pwasm_instance_set_host_info_with_finalizer wasm_instance_set_host_info_with_finalizer;
    pwasm_instance_as_ref wasm_instance_as_ref;
    pwasm_ref_as_instance wasm_ref_as_instance;
    pwasm_instance_as_ref_const wasm_instance_as_ref_const;
    pwasm_ref_as_instance_const wasm_ref_as_instance_const;
    pwasm_instance_new wasm_instance_new;
    pwasm_instance_exports wasm_instance_exports;
    pwasi_config_delete wasi_config_delete;
    pwasi_config_new wasi_config_new;
    pwasi_config_set_argv wasi_config_set_argv;
    pwasi_config_inherit_argv wasi_config_inherit_argv;
    pwasi_config_set_env wasi_config_set_env;
    pwasi_config_inherit_env wasi_config_inherit_env;
    pwasi_config_set_stdin_file wasi_config_set_stdin_file;
    pwasi_config_set_stdin_bytes wasi_config_set_stdin_bytes;
    pwasi_config_inherit_stdin wasi_config_inherit_stdin;
    pwasi_config_set_stdout_file wasi_config_set_stdout_file;
    pwasi_config_inherit_stdout wasi_config_inherit_stdout;
    pwasi_config_set_stderr_file wasi_config_set_stderr_file;
    pwasi_config_inherit_stderr wasi_config_inherit_stderr;
    pwasi_config_preopen_dir wasi_config_preopen_dir;
    pwasmtime_error_new wasmtime_error_new;
    pwasmtime_error_delete wasmtime_error_delete;
    pwasmtime_error_message wasmtime_error_message;
    pwasmtime_error_exit_status wasmtime_error_exit_status;
    pwasmtime_error_wasm_trace wasmtime_error_wasm_trace;
    pwasmtime_config_debug_info_set wasmtime_config_debug_info_set;
    pwasmtime_config_consume_fuel_set wasmtime_config_consume_fuel_set;
    pwasmtime_config_epoch_interruption_set wasmtime_config_epoch_interruption_set;
    pwasmtime_config_max_wasm_stack_set wasmtime_config_max_wasm_stack_set;
    pwasmtime_config_wasm_threads_set wasmtime_config_wasm_threads_set;
    pwasmtime_config_wasm_tail_call_set wasmtime_config_wasm_tail_call_set;
    pwasmtime_config_wasm_reference_types_set wasmtime_config_wasm_reference_types_set;
    pwasmtime_config_wasm_function_references_set wasmtime_config_wasm_function_references_set;
    pwasmtime_config_wasm_gc_set wasmtime_config_wasm_gc_set;
    pwasmtime_config_wasm_simd_set wasmtime_config_wasm_simd_set;
    pwasmtime_config_wasm_relaxed_simd_set wasmtime_config_wasm_relaxed_simd_set;
    pwasmtime_config_wasm_relaxed_simd_deterministic_set wasmtime_config_wasm_relaxed_simd_deterministic_set;
    pwasmtime_config_wasm_bulk_memory_set wasmtime_config_wasm_bulk_memory_set;
    pwasmtime_config_wasm_multi_value_set wasmtime_config_wasm_multi_value_set;
    pwasmtime_config_wasm_multi_memory_set wasmtime_config_wasm_multi_memory_set;
    pwasmtime_config_wasm_memory64_set wasmtime_config_wasm_memory64_set;
    pwasmtime_config_strategy_set wasmtime_config_strategy_set;
    pwasmtime_config_parallel_compilation_set wasmtime_config_parallel_compilation_set;
    pwasmtime_config_cranelift_debug_verifier_set wasmtime_config_cranelift_debug_verifier_set;
    pwasmtime_config_cranelift_nan_canonicalization_set wasmtime_config_cranelift_nan_canonicalization_set;
    pwasmtime_config_cranelift_opt_level_set wasmtime_config_cranelift_opt_level_set;
    pwasmtime_config_profiler_set wasmtime_config_profiler_set;
    pwasmtime_config_static_memory_forced_set wasmtime_config_static_memory_forced_set;
    pwasmtime_config_static_memory_maximum_size_set wasmtime_config_static_memory_maximum_size_set;
    pwasmtime_config_static_memory_guard_size_set wasmtime_config_static_memory_guard_size_set;
    pwasmtime_config_dynamic_memory_guard_size_set wasmtime_config_dynamic_memory_guard_size_set;
    pwasmtime_config_dynamic_memory_reserved_for_growth_set wasmtime_config_dynamic_memory_reserved_for_growth_set;
    pwasmtime_config_native_unwind_info_set wasmtime_config_native_unwind_info_set;
    pwasmtime_config_cache_config_load wasmtime_config_cache_config_load;
    pwasmtime_config_target_set wasmtime_config_target_set;
    pwasmtime_config_cranelift_flag_enable wasmtime_config_cranelift_flag_enable;
    pwasmtime_config_cranelift_flag_set wasmtime_config_cranelift_flag_set;
    pwasmtime_config_macos_use_mach_ports_set wasmtime_config_macos_use_mach_ports_set;
    pwasmtime_config_host_memory_creator_set wasmtime_config_host_memory_creator_set;
    pwasmtime_config_memory_init_cow_set wasmtime_config_memory_init_cow_set;
    pwasmtime_engine_increment_epoch wasmtime_engine_increment_epoch;
    pwasmtime_module_new wasmtime_module_new;
    pwasmtime_module_delete wasmtime_module_delete;
    pwasmtime_module_clone wasmtime_module_clone;
    pwasmtime_module_imports wasmtime_module_imports;
    pwasmtime_module_exports wasmtime_module_exports;
    pwasmtime_module_validate wasmtime_module_validate;
    pwasmtime_module_serialize wasmtime_module_serialize;
    pwasmtime_module_deserialize wasmtime_module_deserialize;
    pwasmtime_module_deserialize_file wasmtime_module_deserialize_file;
    pwasmtime_module_image_range wasmtime_module_image_range;
    pwasmtime_sharedmemory_new wasmtime_sharedmemory_new;
    pwasmtime_sharedmemory_delete wasmtime_sharedmemory_delete;
    pwasmtime_sharedmemory_clone wasmtime_sharedmemory_clone;
    pwasmtime_sharedmemory_type wasmtime_sharedmemory_type;
    pwasmtime_sharedmemory_data wasmtime_sharedmemory_data;
    pwasmtime_sharedmemory_data_size wasmtime_sharedmemory_data_size;
    pwasmtime_sharedmemory_size wasmtime_sharedmemory_size;
    pwasmtime_sharedmemory_grow wasmtime_sharedmemory_grow;
    pwasmtime_store_new wasmtime_store_new;
    pwasmtime_store_context wasmtime_store_context;
    pwasmtime_store_limiter wasmtime_store_limiter;
    pwasmtime_store_delete wasmtime_store_delete;
    pwasmtime_context_get_data wasmtime_context_get_data;
    pwasmtime_context_set_data wasmtime_context_set_data;
    pwasmtime_context_gc wasmtime_context_gc;
    pwasmtime_context_set_fuel wasmtime_context_set_fuel;
    pwasmtime_context_get_fuel wasmtime_context_get_fuel;
    pwasmtime_context_set_wasi wasmtime_context_set_wasi;
    pwasmtime_context_set_epoch_deadline wasmtime_context_set_epoch_deadline;
    pwasmtime_store_epoch_deadline_callback wasmtime_store_epoch_deadline_callback;
    pwasmtime_extern_delete wasmtime_extern_delete;
    pwasmtime_extern_type wasmtime_extern_type;
    pwasmtime_anyref_clone wasmtime_anyref_clone;
    pwasmtime_anyref_delete wasmtime_anyref_delete;
    pwasmtime_anyref_from_raw wasmtime_anyref_from_raw;
    pwasmtime_anyref_to_raw wasmtime_anyref_to_raw;
    pwasmtime_anyref_from_i31 wasmtime_anyref_from_i31;
    pwasmtime_anyref_i31_get_u wasmtime_anyref_i31_get_u;
    pwasmtime_anyref_i31_get_s wasmtime_anyref_i31_get_s;
    pwasmtime_externref_new wasmtime_externref_new;
    pwasmtime_externref_data wasmtime_externref_data;
    pwasmtime_externref_clone wasmtime_externref_clone;
    pwasmtime_externref_delete wasmtime_externref_delete;
    pwasmtime_externref_from_raw wasmtime_externref_from_raw;
    pwasmtime_externref_to_raw wasmtime_externref_to_raw;
    pwasmtime_val_delete wasmtime_val_delete;
    pwasmtime_val_copy wasmtime_val_copy;
    pwasmtime_func_new wasmtime_func_new;
    pwasmtime_func_new_unchecked wasmtime_func_new_unchecked;
    pwasmtime_func_type wasmtime_func_type;
    pwasmtime_func_call wasmtime_func_call;
    pwasmtime_func_call_unchecked wasmtime_func_call_unchecked;
    pwasmtime_caller_export_get wasmtime_caller_export_get;
    pwasmtime_caller_context wasmtime_caller_context;
    pwasmtime_func_from_raw wasmtime_func_from_raw;
    pwasmtime_func_to_raw wasmtime_func_to_raw;
    pwasmtime_global_new wasmtime_global_new;
    pwasmtime_global_type wasmtime_global_type;
    pwasmtime_global_get wasmtime_global_get;
    pwasmtime_global_set wasmtime_global_set;
    pwasmtime_instance_new wasmtime_instance_new;
    pwasmtime_instance_export_get wasmtime_instance_export_get;
    pwasmtime_instance_export_nth wasmtime_instance_export_nth;
    pwasmtime_instance_pre_delete wasmtime_instance_pre_delete;
    pwasmtime_instance_pre_instantiate wasmtime_instance_pre_instantiate;
    pwasmtime_instance_pre_module wasmtime_instance_pre_module;
    pwasmtime_linker_new wasmtime_linker_new;
    pwasmtime_linker_clone wasmtime_linker_clone;
    pwasmtime_linker_delete wasmtime_linker_delete;
    pwasmtime_linker_allow_shadowing wasmtime_linker_allow_shadowing;
    pwasmtime_linker_define wasmtime_linker_define;
    pwasmtime_linker_define_func wasmtime_linker_define_func;
    pwasmtime_linker_define_func_unchecked wasmtime_linker_define_func_unchecked;
    pwasmtime_linker_define_wasi wasmtime_linker_define_wasi;
    pwasmtime_linker_define_instance wasmtime_linker_define_instance;
    pwasmtime_linker_instantiate wasmtime_linker_instantiate;
    pwasmtime_linker_module wasmtime_linker_module;
    pwasmtime_linker_get_default wasmtime_linker_get_default;
    pwasmtime_linker_get wasmtime_linker_get;
    pwasmtime_linker_instantiate_pre wasmtime_linker_instantiate_pre;
    pwasmtime_memorytype_new wasmtime_memorytype_new;
    pwasmtime_memorytype_minimum wasmtime_memorytype_minimum;
    pwasmtime_memorytype_maximum wasmtime_memorytype_maximum;
    pwasmtime_memorytype_is64 wasmtime_memorytype_is64;
    pwasmtime_memorytype_isshared wasmtime_memorytype_isshared;
    pwasmtime_memory_new wasmtime_memory_new;
    pwasmtime_memory_type wasmtime_memory_type;
    pwasmtime_memory_data wasmtime_memory_data;
    pwasmtime_memory_data_size wasmtime_memory_data_size;
    pwasmtime_memory_size wasmtime_memory_size;
    pwasmtime_memory_grow wasmtime_memory_grow;
    pwasmtime_guestprofiler_delete wasmtime_guestprofiler_delete;
    pwasmtime_guestprofiler_new wasmtime_guestprofiler_new;
    pwasmtime_guestprofiler_sample wasmtime_guestprofiler_sample;
    pwasmtime_guestprofiler_finish wasmtime_guestprofiler_finish;
    pwasmtime_table_new wasmtime_table_new;
    pwasmtime_table_type wasmtime_table_type;
    pwasmtime_table_get wasmtime_table_get;
    pwasmtime_table_set wasmtime_table_set;
    pwasmtime_table_size wasmtime_table_size;
    pwasmtime_table_grow wasmtime_table_grow;
    pwasmtime_trap_new wasmtime_trap_new;
    pwasmtime_trap_code wasmtime_trap_code;
    pwasmtime_frame_func_name wasmtime_frame_func_name;
    pwasmtime_frame_module_name wasmtime_frame_module_name;
    pwasmtime_config_async_support_set wasmtime_config_async_support_set;
    pwasmtime_config_async_stack_size_set wasmtime_config_async_stack_size_set;
    pwasmtime_context_fuel_async_yield_interval wasmtime_context_fuel_async_yield_interval;
    pwasmtime_context_epoch_deadline_async_yield_and_update wasmtime_context_epoch_deadline_async_yield_and_update;
    pwasmtime_call_future_poll wasmtime_call_future_poll;
    pwasmtime_call_future_delete wasmtime_call_future_delete;
    pwasmtime_func_call_async wasmtime_func_call_async;
    pwasmtime_linker_define_async_func wasmtime_linker_define_async_func;
    pwasmtime_linker_instantiate_async wasmtime_linker_instantiate_async;
    pwasmtime_instance_pre_instantiate_async wasmtime_instance_pre_instantiate_async;
    pwasmtime_config_host_stack_creator_set wasmtime_config_host_stack_creator_set;
    pwasmtime_wat2wasm wasmtime_wat2wasm;
}
package void loadFuncs(SharedLib lib, bool min = false) { 
    bindSymbol_stdcall(lib, wasm_byte_vec_new_empty, "wasm_byte_vec_new_empty");
    bindSymbol_stdcall(lib, wasm_byte_vec_new_uninitialized, "wasm_byte_vec_new_uninitialized");
    bindSymbol_stdcall(lib, wasm_byte_vec_new, "wasm_byte_vec_new");
    bindSymbol_stdcall(lib, wasm_byte_vec_copy, "wasm_byte_vec_copy");
    bindSymbol_stdcall(lib, wasm_byte_vec_delete, "wasm_byte_vec_delete");
    bindSymbol_stdcall(lib, wasm_config_delete, "wasm_config_delete");
    bindSymbol_stdcall(lib, wasm_config_new, "wasm_config_new");
    bindSymbol_stdcall(lib, wasm_engine_delete, "wasm_engine_delete");
    bindSymbol_stdcall(lib, wasm_engine_new, "wasm_engine_new");
    bindSymbol_stdcall(lib, wasm_engine_new_with_config, "wasm_engine_new_with_config");
    bindSymbol_stdcall(lib, wasm_store_delete, "wasm_store_delete");
    bindSymbol_stdcall(lib, wasm_store_new, "wasm_store_new");
    bindSymbol_stdcall(lib, wasm_valtype_delete, "wasm_valtype_delete");
    bindSymbol_stdcall(lib, wasm_valtype_vec_new_empty, "wasm_valtype_vec_new_empty");
    bindSymbol_stdcall(lib, wasm_valtype_vec_new_uninitialized, "wasm_valtype_vec_new_uninitialized");
    bindSymbol_stdcall(lib, wasm_valtype_vec_new, "wasm_valtype_vec_new");
    bindSymbol_stdcall(lib, wasm_valtype_vec_copy, "wasm_valtype_vec_copy");
    bindSymbol_stdcall(lib, wasm_valtype_vec_delete, "wasm_valtype_vec_delete");
    bindSymbol_stdcall(lib, wasm_valtype_copy, "wasm_valtype_copy");
    bindSymbol_stdcall(lib, wasm_valtype_new, "wasm_valtype_new");
    bindSymbol_stdcall(lib, wasm_valtype_kind, "wasm_valtype_kind");
    bindSymbol_stdcall(lib, wasm_functype_delete, "wasm_functype_delete");
    bindSymbol_stdcall(lib, wasm_functype_vec_new_empty, "wasm_functype_vec_new_empty");
    bindSymbol_stdcall(lib, wasm_functype_vec_new_uninitialized, "wasm_functype_vec_new_uninitialized");
    bindSymbol_stdcall(lib, wasm_functype_vec_new, "wasm_functype_vec_new");
    bindSymbol_stdcall(lib, wasm_functype_vec_copy, "wasm_functype_vec_copy");
    bindSymbol_stdcall(lib, wasm_functype_vec_delete, "wasm_functype_vec_delete");
    bindSymbol_stdcall(lib, wasm_functype_copy, "wasm_functype_copy");
    bindSymbol_stdcall(lib, wasm_functype_new, "wasm_functype_new");
    bindSymbol_stdcall(lib, wasm_functype_params, "wasm_functype_params");
    bindSymbol_stdcall(lib, wasm_functype_results, "wasm_functype_results");
    bindSymbol_stdcall(lib, wasm_globaltype_delete, "wasm_globaltype_delete");
    bindSymbol_stdcall(lib, wasm_globaltype_vec_new_empty, "wasm_globaltype_vec_new_empty");
    bindSymbol_stdcall(lib, wasm_globaltype_vec_new_uninitialized, "wasm_globaltype_vec_new_uninitialized");
    bindSymbol_stdcall(lib, wasm_globaltype_vec_new, "wasm_globaltype_vec_new");
    bindSymbol_stdcall(lib, wasm_globaltype_vec_copy, "wasm_globaltype_vec_copy");
    bindSymbol_stdcall(lib, wasm_globaltype_vec_delete, "wasm_globaltype_vec_delete");
    bindSymbol_stdcall(lib, wasm_globaltype_copy, "wasm_globaltype_copy");
    bindSymbol_stdcall(lib, wasm_globaltype_new, "wasm_globaltype_new");
    bindSymbol_stdcall(lib, wasm_globaltype_content, "wasm_globaltype_content");
    bindSymbol_stdcall(lib, wasm_globaltype_mutability, "wasm_globaltype_mutability");
    bindSymbol_stdcall(lib, wasm_tabletype_delete, "wasm_tabletype_delete");
    bindSymbol_stdcall(lib, wasm_tabletype_vec_new_empty, "wasm_tabletype_vec_new_empty");
    bindSymbol_stdcall(lib, wasm_tabletype_vec_new_uninitialized, "wasm_tabletype_vec_new_uninitialized");
    bindSymbol_stdcall(lib, wasm_tabletype_vec_new, "wasm_tabletype_vec_new");
    bindSymbol_stdcall(lib, wasm_tabletype_vec_copy, "wasm_tabletype_vec_copy");
    bindSymbol_stdcall(lib, wasm_tabletype_vec_delete, "wasm_tabletype_vec_delete");
    bindSymbol_stdcall(lib, wasm_tabletype_copy, "wasm_tabletype_copy");
    bindSymbol_stdcall(lib, wasm_tabletype_new, "wasm_tabletype_new");
    bindSymbol_stdcall(lib, wasm_tabletype_element, "wasm_tabletype_element");
    bindSymbol_stdcall(lib, wasm_tabletype_limits, "wasm_tabletype_limits");
    bindSymbol_stdcall(lib, wasm_memorytype_delete, "wasm_memorytype_delete");
    bindSymbol_stdcall(lib, wasm_memorytype_vec_new_empty, "wasm_memorytype_vec_new_empty");
    bindSymbol_stdcall(lib, wasm_memorytype_vec_new_uninitialized, "wasm_memorytype_vec_new_uninitialized");
    bindSymbol_stdcall(lib, wasm_memorytype_vec_new, "wasm_memorytype_vec_new");
    bindSymbol_stdcall(lib, wasm_memorytype_vec_copy, "wasm_memorytype_vec_copy");
    bindSymbol_stdcall(lib, wasm_memorytype_vec_delete, "wasm_memorytype_vec_delete");
    bindSymbol_stdcall(lib, wasm_memorytype_copy, "wasm_memorytype_copy");
    bindSymbol_stdcall(lib, wasm_memorytype_new, "wasm_memorytype_new");
    bindSymbol_stdcall(lib, wasm_memorytype_limits, "wasm_memorytype_limits");
    bindSymbol_stdcall(lib, wasm_externtype_delete, "wasm_externtype_delete");
    bindSymbol_stdcall(lib, wasm_externtype_vec_new_empty, "wasm_externtype_vec_new_empty");
    bindSymbol_stdcall(lib, wasm_externtype_vec_new_uninitialized, "wasm_externtype_vec_new_uninitialized");
    bindSymbol_stdcall(lib, wasm_externtype_vec_new, "wasm_externtype_vec_new");
    bindSymbol_stdcall(lib, wasm_externtype_vec_copy, "wasm_externtype_vec_copy");
    bindSymbol_stdcall(lib, wasm_externtype_vec_delete, "wasm_externtype_vec_delete");
    bindSymbol_stdcall(lib, wasm_externtype_copy, "wasm_externtype_copy");
    bindSymbol_stdcall(lib, wasm_externtype_kind, "wasm_externtype_kind");
    bindSymbol_stdcall(lib, wasm_functype_as_externtype, "wasm_functype_as_externtype");
    bindSymbol_stdcall(lib, wasm_globaltype_as_externtype, "wasm_globaltype_as_externtype");
    bindSymbol_stdcall(lib, wasm_tabletype_as_externtype, "wasm_tabletype_as_externtype");
    bindSymbol_stdcall(lib, wasm_memorytype_as_externtype, "wasm_memorytype_as_externtype");
    bindSymbol_stdcall(lib, wasm_externtype_as_functype, "wasm_externtype_as_functype");
    bindSymbol_stdcall(lib, wasm_externtype_as_globaltype, "wasm_externtype_as_globaltype");
    bindSymbol_stdcall(lib, wasm_externtype_as_tabletype, "wasm_externtype_as_tabletype");
    bindSymbol_stdcall(lib, wasm_externtype_as_memorytype, "wasm_externtype_as_memorytype");
    bindSymbol_stdcall(lib, wasm_functype_as_externtype_const, "wasm_functype_as_externtype_const");
    bindSymbol_stdcall(lib, wasm_globaltype_as_externtype_const, "wasm_globaltype_as_externtype_const");
    bindSymbol_stdcall(lib, wasm_tabletype_as_externtype_const, "wasm_tabletype_as_externtype_const");
    bindSymbol_stdcall(lib, wasm_memorytype_as_externtype_const, "wasm_memorytype_as_externtype_const");
    bindSymbol_stdcall(lib, wasm_externtype_as_functype_const, "wasm_externtype_as_functype_const");
    bindSymbol_stdcall(lib, wasm_externtype_as_globaltype_const, "wasm_externtype_as_globaltype_const");
    bindSymbol_stdcall(lib, wasm_externtype_as_tabletype_const, "wasm_externtype_as_tabletype_const");
    bindSymbol_stdcall(lib, wasm_externtype_as_memorytype_const, "wasm_externtype_as_memorytype_const");
    bindSymbol_stdcall(lib, wasm_importtype_delete, "wasm_importtype_delete");
    bindSymbol_stdcall(lib, wasm_importtype_vec_new_empty, "wasm_importtype_vec_new_empty");
    bindSymbol_stdcall(lib, wasm_importtype_vec_new_uninitialized, "wasm_importtype_vec_new_uninitialized");
    bindSymbol_stdcall(lib, wasm_importtype_vec_new, "wasm_importtype_vec_new");
    bindSymbol_stdcall(lib, wasm_importtype_vec_copy, "wasm_importtype_vec_copy");
    bindSymbol_stdcall(lib, wasm_importtype_vec_delete, "wasm_importtype_vec_delete");
    bindSymbol_stdcall(lib, wasm_importtype_copy, "wasm_importtype_copy");
    bindSymbol_stdcall(lib, wasm_importtype_new, "wasm_importtype_new");
    bindSymbol_stdcall(lib, wasm_importtype_module, "wasm_importtype_module");
    bindSymbol_stdcall(lib, wasm_importtype_name, "wasm_importtype_name");
    bindSymbol_stdcall(lib, wasm_importtype_type, "wasm_importtype_type");
    bindSymbol_stdcall(lib, wasm_exporttype_delete, "wasm_exporttype_delete");
    bindSymbol_stdcall(lib, wasm_exporttype_vec_new_empty, "wasm_exporttype_vec_new_empty");
    bindSymbol_stdcall(lib, wasm_exporttype_vec_new_uninitialized, "wasm_exporttype_vec_new_uninitialized");
    bindSymbol_stdcall(lib, wasm_exporttype_vec_new, "wasm_exporttype_vec_new");
    bindSymbol_stdcall(lib, wasm_exporttype_vec_copy, "wasm_exporttype_vec_copy");
    bindSymbol_stdcall(lib, wasm_exporttype_vec_delete, "wasm_exporttype_vec_delete");
    bindSymbol_stdcall(lib, wasm_exporttype_copy, "wasm_exporttype_copy");
    bindSymbol_stdcall(lib, wasm_exporttype_new, "wasm_exporttype_new");
    bindSymbol_stdcall(lib, wasm_exporttype_name, "wasm_exporttype_name");
    bindSymbol_stdcall(lib, wasm_exporttype_type, "wasm_exporttype_type");
    bindSymbol_stdcall(lib, wasm_val_delete, "wasm_val_delete");
    bindSymbol_stdcall(lib, wasm_val_copy, "wasm_val_copy");
    bindSymbol_stdcall(lib, wasm_val_vec_new_empty, "wasm_val_vec_new_empty");
    bindSymbol_stdcall(lib, wasm_val_vec_new_uninitialized, "wasm_val_vec_new_uninitialized");
    bindSymbol_stdcall(lib, wasm_val_vec_new, "wasm_val_vec_new");
    bindSymbol_stdcall(lib, wasm_val_vec_copy, "wasm_val_vec_copy");
    bindSymbol_stdcall(lib, wasm_val_vec_delete, "wasm_val_vec_delete");
    bindSymbol_stdcall(lib, wasm_ref_delete, "wasm_ref_delete");
    bindSymbol_stdcall(lib, wasm_ref_copy, "wasm_ref_copy");
    bindSymbol_stdcall(lib, wasm_ref_same, "wasm_ref_same");
    bindSymbol_stdcall(lib, wasm_ref_get_host_info, "wasm_ref_get_host_info");
    bindSymbol_stdcall(lib, wasm_ref_set_host_info, "wasm_ref_set_host_info");
    bindSymbol_stdcall(lib, wasm_ref_set_host_info_with_finalizer, "wasm_ref_set_host_info_with_finalizer");
    bindSymbol_stdcall(lib, wasm_frame_delete, "wasm_frame_delete");
    bindSymbol_stdcall(lib, wasm_frame_vec_new_empty, "wasm_frame_vec_new_empty");
    bindSymbol_stdcall(lib, wasm_frame_vec_new_uninitialized, "wasm_frame_vec_new_uninitialized");
    bindSymbol_stdcall(lib, wasm_frame_vec_new, "wasm_frame_vec_new");
    bindSymbol_stdcall(lib, wasm_frame_vec_copy, "wasm_frame_vec_copy");
    bindSymbol_stdcall(lib, wasm_frame_vec_delete, "wasm_frame_vec_delete");
    bindSymbol_stdcall(lib, wasm_frame_copy, "wasm_frame_copy");
    bindSymbol_stdcall(lib, wasm_frame_instance, "wasm_frame_instance");
    bindSymbol_stdcall(lib, wasm_frame_func_index, "wasm_frame_func_index");
    bindSymbol_stdcall(lib, wasm_frame_func_offset, "wasm_frame_func_offset");
    bindSymbol_stdcall(lib, wasm_frame_module_offset, "wasm_frame_module_offset");
    bindSymbol_stdcall(lib, wasm_trap_delete, "wasm_trap_delete");
    bindSymbol_stdcall(lib, wasm_trap_copy, "wasm_trap_copy");
    bindSymbol_stdcall(lib, wasm_trap_same, "wasm_trap_same");
    bindSymbol_stdcall(lib, wasm_trap_get_host_info, "wasm_trap_get_host_info");
    bindSymbol_stdcall(lib, wasm_trap_set_host_info, "wasm_trap_set_host_info");
    bindSymbol_stdcall(lib, wasm_trap_set_host_info_with_finalizer, "wasm_trap_set_host_info_with_finalizer");
    bindSymbol_stdcall(lib, wasm_trap_as_ref, "wasm_trap_as_ref");
    bindSymbol_stdcall(lib, wasm_ref_as_trap, "wasm_ref_as_trap");
    bindSymbol_stdcall(lib, wasm_trap_as_ref_const, "wasm_trap_as_ref_const");
    bindSymbol_stdcall(lib, wasm_ref_as_trap_const, "wasm_ref_as_trap_const");
    bindSymbol_stdcall(lib, wasm_trap_new, "wasm_trap_new");
    bindSymbol_stdcall(lib, wasm_trap_message, "wasm_trap_message");
    bindSymbol_stdcall(lib, wasm_trap_origin, "wasm_trap_origin");
    bindSymbol_stdcall(lib, wasm_trap_trace, "wasm_trap_trace");
    bindSymbol_stdcall(lib, wasm_foreign_delete, "wasm_foreign_delete");
    bindSymbol_stdcall(lib, wasm_foreign_copy, "wasm_foreign_copy");
    bindSymbol_stdcall(lib, wasm_foreign_same, "wasm_foreign_same");
    bindSymbol_stdcall(lib, wasm_foreign_get_host_info, "wasm_foreign_get_host_info");
    bindSymbol_stdcall(lib, wasm_foreign_set_host_info, "wasm_foreign_set_host_info");
    bindSymbol_stdcall(lib, wasm_foreign_set_host_info_with_finalizer, "wasm_foreign_set_host_info_with_finalizer");
    bindSymbol_stdcall(lib, wasm_foreign_as_ref, "wasm_foreign_as_ref");
    bindSymbol_stdcall(lib, wasm_ref_as_foreign, "wasm_ref_as_foreign");
    bindSymbol_stdcall(lib, wasm_foreign_as_ref_const, "wasm_foreign_as_ref_const");
    bindSymbol_stdcall(lib, wasm_ref_as_foreign_const, "wasm_ref_as_foreign_const");
    bindSymbol_stdcall(lib, wasm_foreign_new, "wasm_foreign_new");
    bindSymbol_stdcall(lib, wasm_module_delete, "wasm_module_delete");
    bindSymbol_stdcall(lib, wasm_module_copy, "wasm_module_copy");
    bindSymbol_stdcall(lib, wasm_module_same, "wasm_module_same");
    bindSymbol_stdcall(lib, wasm_module_get_host_info, "wasm_module_get_host_info");
    bindSymbol_stdcall(lib, wasm_module_set_host_info, "wasm_module_set_host_info");
    bindSymbol_stdcall(lib, wasm_module_set_host_info_with_finalizer, "wasm_module_set_host_info_with_finalizer");
    bindSymbol_stdcall(lib, wasm_module_as_ref, "wasm_module_as_ref");
    bindSymbol_stdcall(lib, wasm_ref_as_module, "wasm_ref_as_module");
    bindSymbol_stdcall(lib, wasm_module_as_ref_const, "wasm_module_as_ref_const");
    bindSymbol_stdcall(lib, wasm_ref_as_module_const, "wasm_ref_as_module_const");
    bindSymbol_stdcall(lib, wasm_shared_module_delete, "wasm_shared_module_delete");
    bindSymbol_stdcall(lib, wasm_module_share, "wasm_module_share");
    bindSymbol_stdcall(lib, wasm_module_obtain, "wasm_module_obtain");
    bindSymbol_stdcall(lib, wasm_module_new, "wasm_module_new");
    bindSymbol_stdcall(lib, wasm_module_validate, "wasm_module_validate");
    bindSymbol_stdcall(lib, wasm_module_imports, "wasm_module_imports");
    bindSymbol_stdcall(lib, wasm_module_exports, "wasm_module_exports");
    bindSymbol_stdcall(lib, wasm_module_serialize, "wasm_module_serialize");
    bindSymbol_stdcall(lib, wasm_module_deserialize, "wasm_module_deserialize");
    bindSymbol_stdcall(lib, wasm_func_delete, "wasm_func_delete");
    bindSymbol_stdcall(lib, wasm_func_copy, "wasm_func_copy");
    bindSymbol_stdcall(lib, wasm_func_same, "wasm_func_same");
    bindSymbol_stdcall(lib, wasm_func_get_host_info, "wasm_func_get_host_info");
    bindSymbol_stdcall(lib, wasm_func_set_host_info, "wasm_func_set_host_info");
    bindSymbol_stdcall(lib, wasm_func_set_host_info_with_finalizer, "wasm_func_set_host_info_with_finalizer");
    bindSymbol_stdcall(lib, wasm_func_as_ref, "wasm_func_as_ref");
    bindSymbol_stdcall(lib, wasm_ref_as_func, "wasm_ref_as_func");
    bindSymbol_stdcall(lib, wasm_func_as_ref_const, "wasm_func_as_ref_const");
    bindSymbol_stdcall(lib, wasm_ref_as_func_const, "wasm_ref_as_func_const");
    bindSymbol_stdcall(lib, wasm_func_new, "wasm_func_new");
    bindSymbol_stdcall(lib, wasm_func_new_with_env, "wasm_func_new_with_env");
    bindSymbol_stdcall(lib, wasm_func_type, "wasm_func_type");
    bindSymbol_stdcall(lib, wasm_func_param_arity, "wasm_func_param_arity");
    bindSymbol_stdcall(lib, wasm_func_result_arity, "wasm_func_result_arity");
    bindSymbol_stdcall(lib, wasm_func_call, "wasm_func_call");
    bindSymbol_stdcall(lib, wasm_global_delete, "wasm_global_delete");
    bindSymbol_stdcall(lib, wasm_global_copy, "wasm_global_copy");
    bindSymbol_stdcall(lib, wasm_global_same, "wasm_global_same");
    bindSymbol_stdcall(lib, wasm_global_get_host_info, "wasm_global_get_host_info");
    bindSymbol_stdcall(lib, wasm_global_set_host_info, "wasm_global_set_host_info");
    bindSymbol_stdcall(lib, wasm_global_set_host_info_with_finalizer, "wasm_global_set_host_info_with_finalizer");
    bindSymbol_stdcall(lib, wasm_global_as_ref, "wasm_global_as_ref");
    bindSymbol_stdcall(lib, wasm_ref_as_global, "wasm_ref_as_global");
    bindSymbol_stdcall(lib, wasm_global_as_ref_const, "wasm_global_as_ref_const");
    bindSymbol_stdcall(lib, wasm_ref_as_global_const, "wasm_ref_as_global_const");
    bindSymbol_stdcall(lib, wasm_global_new, "wasm_global_new");
    bindSymbol_stdcall(lib, wasm_global_type, "wasm_global_type");
    bindSymbol_stdcall(lib, wasm_global_get, "wasm_global_get");
    bindSymbol_stdcall(lib, wasm_global_set, "wasm_global_set");
    bindSymbol_stdcall(lib, wasm_table_delete, "wasm_table_delete");
    bindSymbol_stdcall(lib, wasm_table_copy, "wasm_table_copy");
    bindSymbol_stdcall(lib, wasm_table_same, "wasm_table_same");
    bindSymbol_stdcall(lib, wasm_table_get_host_info, "wasm_table_get_host_info");
    bindSymbol_stdcall(lib, wasm_table_set_host_info, "wasm_table_set_host_info");
    bindSymbol_stdcall(lib, wasm_table_set_host_info_with_finalizer, "wasm_table_set_host_info_with_finalizer");
    bindSymbol_stdcall(lib, wasm_table_as_ref, "wasm_table_as_ref");
    bindSymbol_stdcall(lib, wasm_ref_as_table, "wasm_ref_as_table");
    bindSymbol_stdcall(lib, wasm_table_as_ref_const, "wasm_table_as_ref_const");
    bindSymbol_stdcall(lib, wasm_ref_as_table_const, "wasm_ref_as_table_const");
    bindSymbol_stdcall(lib, wasm_table_new, "wasm_table_new");
    bindSymbol_stdcall(lib, wasm_table_type, "wasm_table_type");
    bindSymbol_stdcall(lib, wasm_table_get, "wasm_table_get");
    bindSymbol_stdcall(lib, wasm_table_set, "wasm_table_set");
    bindSymbol_stdcall(lib, wasm_table_size, "wasm_table_size");
    bindSymbol_stdcall(lib, wasm_table_grow, "wasm_table_grow");
    bindSymbol_stdcall(lib, wasm_memory_delete, "wasm_memory_delete");
    bindSymbol_stdcall(lib, wasm_memory_copy, "wasm_memory_copy");
    bindSymbol_stdcall(lib, wasm_memory_same, "wasm_memory_same");
    bindSymbol_stdcall(lib, wasm_memory_get_host_info, "wasm_memory_get_host_info");
    bindSymbol_stdcall(lib, wasm_memory_set_host_info, "wasm_memory_set_host_info");
    bindSymbol_stdcall(lib, wasm_memory_set_host_info_with_finalizer, "wasm_memory_set_host_info_with_finalizer");
    bindSymbol_stdcall(lib, wasm_memory_as_ref, "wasm_memory_as_ref");
    bindSymbol_stdcall(lib, wasm_ref_as_memory, "wasm_ref_as_memory");
    bindSymbol_stdcall(lib, wasm_memory_as_ref_const, "wasm_memory_as_ref_const");
    bindSymbol_stdcall(lib, wasm_ref_as_memory_const, "wasm_ref_as_memory_const");
    bindSymbol_stdcall(lib, wasm_memory_new, "wasm_memory_new");
    bindSymbol_stdcall(lib, wasm_memory_type, "wasm_memory_type");
    bindSymbol_stdcall(lib, wasm_memory_data, "wasm_memory_data");
    bindSymbol_stdcall(lib, wasm_memory_data_size, "wasm_memory_data_size");
    bindSymbol_stdcall(lib, wasm_memory_size, "wasm_memory_size");
    bindSymbol_stdcall(lib, wasm_memory_grow, "wasm_memory_grow");
    bindSymbol_stdcall(lib, wasm_extern_delete, "wasm_extern_delete");
    bindSymbol_stdcall(lib, wasm_extern_copy, "wasm_extern_copy");
    bindSymbol_stdcall(lib, wasm_extern_same, "wasm_extern_same");
    bindSymbol_stdcall(lib, wasm_extern_get_host_info, "wasm_extern_get_host_info");
    bindSymbol_stdcall(lib, wasm_extern_set_host_info, "wasm_extern_set_host_info");
    bindSymbol_stdcall(lib, wasm_extern_set_host_info_with_finalizer, "wasm_extern_set_host_info_with_finalizer");
    bindSymbol_stdcall(lib, wasm_extern_as_ref, "wasm_extern_as_ref");
    bindSymbol_stdcall(lib, wasm_ref_as_extern, "wasm_ref_as_extern");
    bindSymbol_stdcall(lib, wasm_extern_as_ref_const, "wasm_extern_as_ref_const");
    bindSymbol_stdcall(lib, wasm_ref_as_extern_const, "wasm_ref_as_extern_const");
    bindSymbol_stdcall(lib, wasm_extern_vec_new_empty, "wasm_extern_vec_new_empty");
    bindSymbol_stdcall(lib, wasm_extern_vec_new_uninitialized, "wasm_extern_vec_new_uninitialized");
    bindSymbol_stdcall(lib, wasm_extern_vec_new, "wasm_extern_vec_new");
    bindSymbol_stdcall(lib, wasm_extern_vec_copy, "wasm_extern_vec_copy");
    bindSymbol_stdcall(lib, wasm_extern_vec_delete, "wasm_extern_vec_delete");
    bindSymbol_stdcall(lib, wasm_extern_kind, "wasm_extern_kind");
    bindSymbol_stdcall(lib, wasm_extern_type, "wasm_extern_type");
    bindSymbol_stdcall(lib, wasm_func_as_extern, "wasm_func_as_extern");
    bindSymbol_stdcall(lib, wasm_global_as_extern, "wasm_global_as_extern");
    bindSymbol_stdcall(lib, wasm_table_as_extern, "wasm_table_as_extern");
    bindSymbol_stdcall(lib, wasm_memory_as_extern, "wasm_memory_as_extern");
    bindSymbol_stdcall(lib, wasm_extern_as_func, "wasm_extern_as_func");
    bindSymbol_stdcall(lib, wasm_extern_as_global, "wasm_extern_as_global");
    bindSymbol_stdcall(lib, wasm_extern_as_table, "wasm_extern_as_table");
    bindSymbol_stdcall(lib, wasm_extern_as_memory, "wasm_extern_as_memory");
    bindSymbol_stdcall(lib, wasm_func_as_extern_const, "wasm_func_as_extern_const");
    bindSymbol_stdcall(lib, wasm_global_as_extern_const, "wasm_global_as_extern_const");
    bindSymbol_stdcall(lib, wasm_table_as_extern_const, "wasm_table_as_extern_const");
    bindSymbol_stdcall(lib, wasm_memory_as_extern_const, "wasm_memory_as_extern_const");
    bindSymbol_stdcall(lib, wasm_extern_as_func_const, "wasm_extern_as_func_const");
    bindSymbol_stdcall(lib, wasm_extern_as_global_const, "wasm_extern_as_global_const");
    bindSymbol_stdcall(lib, wasm_extern_as_table_const, "wasm_extern_as_table_const");
    bindSymbol_stdcall(lib, wasm_extern_as_memory_const, "wasm_extern_as_memory_const");
    bindSymbol_stdcall(lib, wasm_instance_delete, "wasm_instance_delete");
    bindSymbol_stdcall(lib, wasm_instance_copy, "wasm_instance_copy");
    bindSymbol_stdcall(lib, wasm_instance_same, "wasm_instance_same");
    bindSymbol_stdcall(lib, wasm_instance_get_host_info, "wasm_instance_get_host_info");
    bindSymbol_stdcall(lib, wasm_instance_set_host_info, "wasm_instance_set_host_info");
    bindSymbol_stdcall(lib, wasm_instance_set_host_info_with_finalizer, "wasm_instance_set_host_info_with_finalizer");
    bindSymbol_stdcall(lib, wasm_instance_as_ref, "wasm_instance_as_ref");
    bindSymbol_stdcall(lib, wasm_ref_as_instance, "wasm_ref_as_instance");
    bindSymbol_stdcall(lib, wasm_instance_as_ref_const, "wasm_instance_as_ref_const");
    bindSymbol_stdcall(lib, wasm_ref_as_instance_const, "wasm_ref_as_instance_const");
    bindSymbol_stdcall(lib, wasm_instance_new, "wasm_instance_new");
    bindSymbol_stdcall(lib, wasm_instance_exports, "wasm_instance_exports");
    if (!min) {
        bindSymbol_stdcall(lib, wasi_config_delete, "wasi_config_delete");
        bindSymbol_stdcall(lib, wasi_config_new, "wasi_config_new");
        bindSymbol_stdcall(lib, wasi_config_set_argv, "wasi_config_set_argv");
        bindSymbol_stdcall(lib, wasi_config_inherit_argv, "wasi_config_inherit_argv");
        bindSymbol_stdcall(lib, wasi_config_set_env, "wasi_config_set_env");
        bindSymbol_stdcall(lib, wasi_config_inherit_env, "wasi_config_inherit_env");
        bindSymbol_stdcall(lib, wasi_config_set_stdin_file, "wasi_config_set_stdin_file");
        bindSymbol_stdcall(lib, wasi_config_set_stdin_bytes, "wasi_config_set_stdin_bytes");
        bindSymbol_stdcall(lib, wasi_config_inherit_stdin, "wasi_config_inherit_stdin");
        bindSymbol_stdcall(lib, wasi_config_set_stdout_file, "wasi_config_set_stdout_file");
        bindSymbol_stdcall(lib, wasi_config_inherit_stdout, "wasi_config_inherit_stdout");
        bindSymbol_stdcall(lib, wasi_config_set_stderr_file, "wasi_config_set_stderr_file");
        bindSymbol_stdcall(lib, wasi_config_inherit_stderr, "wasi_config_inherit_stderr");
        bindSymbol_stdcall(lib, wasi_config_preopen_dir, "wasi_config_preopen_dir");
    }
    bindSymbol_stdcall(lib, wasmtime_error_new, "wasmtime_error_new");
    bindSymbol_stdcall(lib, wasmtime_error_delete, "wasmtime_error_delete");
    bindSymbol_stdcall(lib, wasmtime_error_message, "wasmtime_error_message");
    bindSymbol_stdcall(lib, wasmtime_error_exit_status, "wasmtime_error_exit_status");
    bindSymbol_stdcall(lib, wasmtime_error_wasm_trace, "wasmtime_error_wasm_trace");
    bindSymbol_stdcall(lib, wasmtime_config_debug_info_set, "wasmtime_config_debug_info_set");
    bindSymbol_stdcall(lib, wasmtime_config_consume_fuel_set, "wasmtime_config_consume_fuel_set");
    bindSymbol_stdcall(lib, wasmtime_config_epoch_interruption_set, "wasmtime_config_epoch_interruption_set");
    bindSymbol_stdcall(lib, wasmtime_config_max_wasm_stack_set, "wasmtime_config_max_wasm_stack_set");
    if (!min) bindSymbol_stdcall(lib, wasmtime_config_wasm_threads_set, "wasmtime_config_wasm_threads_set");
    bindSymbol_stdcall(lib, wasmtime_config_wasm_tail_call_set, "wasmtime_config_wasm_tail_call_set");
    bindSymbol_stdcall(lib, wasmtime_config_wasm_reference_types_set, "wasmtime_config_wasm_reference_types_set");
    bindSymbol_stdcall(lib, wasmtime_config_wasm_function_references_set, "wasmtime_config_wasm_function_references_set");
    bindSymbol_stdcall(lib, wasmtime_config_wasm_gc_set, "wasmtime_config_wasm_gc_set");
    bindSymbol_stdcall(lib, wasmtime_config_wasm_simd_set, "wasmtime_config_wasm_simd_set");
    bindSymbol_stdcall(lib, wasmtime_config_wasm_relaxed_simd_set, "wasmtime_config_wasm_relaxed_simd_set");
    bindSymbol_stdcall(lib, wasmtime_config_wasm_relaxed_simd_deterministic_set, "wasmtime_config_wasm_relaxed_simd_deterministic_set");
    bindSymbol_stdcall(lib, wasmtime_config_wasm_bulk_memory_set, "wasmtime_config_wasm_bulk_memory_set");
    bindSymbol_stdcall(lib, wasmtime_config_wasm_multi_value_set, "wasmtime_config_wasm_multi_value_set");
    bindSymbol_stdcall(lib, wasmtime_config_wasm_multi_memory_set, "wasmtime_config_wasm_multi_memory_set");
    bindSymbol_stdcall(lib, wasmtime_config_wasm_memory64_set, "wasmtime_config_wasm_memory64_set");
    bindSymbol_stdcall(lib, wasmtime_config_strategy_set, "wasmtime_config_strategy_set");
    if (!min) bindSymbol_stdcall(lib, wasmtime_config_parallel_compilation_set, "wasmtime_config_parallel_compilation_set");
    bindSymbol_stdcall(lib, wasmtime_config_cranelift_debug_verifier_set, "wasmtime_config_cranelift_debug_verifier_set");
    bindSymbol_stdcall(lib, wasmtime_config_cranelift_nan_canonicalization_set, "wasmtime_config_cranelift_nan_canonicalization_set");
    bindSymbol_stdcall(lib, wasmtime_config_cranelift_opt_level_set, "wasmtime_config_cranelift_opt_level_set");
    bindSymbol_stdcall(lib, wasmtime_config_profiler_set, "wasmtime_config_profiler_set");
    bindSymbol_stdcall(lib, wasmtime_config_static_memory_forced_set, "wasmtime_config_static_memory_forced_set");
    bindSymbol_stdcall(lib, wasmtime_config_static_memory_maximum_size_set, "wasmtime_config_static_memory_maximum_size_set");
    bindSymbol_stdcall(lib, wasmtime_config_static_memory_guard_size_set, "wasmtime_config_static_memory_guard_size_set");
    bindSymbol_stdcall(lib, wasmtime_config_dynamic_memory_guard_size_set, "wasmtime_config_dynamic_memory_guard_size_set");
    bindSymbol_stdcall(lib, wasmtime_config_dynamic_memory_reserved_for_growth_set, "wasmtime_config_dynamic_memory_reserved_for_growth_set");
    bindSymbol_stdcall(lib, wasmtime_config_native_unwind_info_set, "wasmtime_config_native_unwind_info_set");
    if (!min) bindSymbol_stdcall(lib, wasmtime_config_cache_config_load, "wasmtime_config_cache_config_load");
    bindSymbol_stdcall(lib, wasmtime_config_target_set, "wasmtime_config_target_set");
    bindSymbol_stdcall(lib, wasmtime_config_cranelift_flag_enable, "wasmtime_config_cranelift_flag_enable");
    bindSymbol_stdcall(lib, wasmtime_config_cranelift_flag_set, "wasmtime_config_cranelift_flag_set");
    bindSymbol_stdcall(lib, wasmtime_config_macos_use_mach_ports_set, "wasmtime_config_macos_use_mach_ports_set");
    bindSymbol_stdcall(lib, wasmtime_config_host_memory_creator_set, "wasmtime_config_host_memory_creator_set");
    bindSymbol_stdcall(lib, wasmtime_config_memory_init_cow_set, "wasmtime_config_memory_init_cow_set");
    bindSymbol_stdcall(lib, wasmtime_engine_increment_epoch, "wasmtime_engine_increment_epoch");
    bindSymbol_stdcall(lib, wasmtime_module_new, "wasmtime_module_new");
    bindSymbol_stdcall(lib, wasmtime_module_delete, "wasmtime_module_delete");
    bindSymbol_stdcall(lib, wasmtime_module_clone, "wasmtime_module_clone");
    bindSymbol_stdcall(lib, wasmtime_module_imports, "wasmtime_module_imports");
    bindSymbol_stdcall(lib, wasmtime_module_exports, "wasmtime_module_exports");
    bindSymbol_stdcall(lib, wasmtime_module_validate, "wasmtime_module_validate");
    bindSymbol_stdcall(lib, wasmtime_module_serialize, "wasmtime_module_serialize");
    bindSymbol_stdcall(lib, wasmtime_module_deserialize, "wasmtime_module_deserialize");
    bindSymbol_stdcall(lib, wasmtime_module_deserialize_file, "wasmtime_module_deserialize_file");
    bindSymbol_stdcall(lib, wasmtime_module_image_range, "wasmtime_module_image_range");
    if (!min) bindSymbol_stdcall(lib, wasmtime_sharedmemory_new, "wasmtime_sharedmemory_new");
    bindSymbol_stdcall(lib, wasmtime_sharedmemory_delete, "wasmtime_sharedmemory_delete");
    bindSymbol_stdcall(lib, wasmtime_sharedmemory_clone, "wasmtime_sharedmemory_clone");
    bindSymbol_stdcall(lib, wasmtime_sharedmemory_type, "wasmtime_sharedmemory_type");
    bindSymbol_stdcall(lib, wasmtime_sharedmemory_data, "wasmtime_sharedmemory_data");
    bindSymbol_stdcall(lib, wasmtime_sharedmemory_data_size, "wasmtime_sharedmemory_data_size");
    bindSymbol_stdcall(lib, wasmtime_sharedmemory_size, "wasmtime_sharedmemory_size");
    bindSymbol_stdcall(lib, wasmtime_sharedmemory_grow, "wasmtime_sharedmemory_grow");
    bindSymbol_stdcall(lib, wasmtime_store_new, "wasmtime_store_new");
    bindSymbol_stdcall(lib, wasmtime_store_context, "wasmtime_store_context");
    bindSymbol_stdcall(lib, wasmtime_store_limiter, "wasmtime_store_limiter");
    bindSymbol_stdcall(lib, wasmtime_store_delete, "wasmtime_store_delete");
    bindSymbol_stdcall(lib, wasmtime_context_get_data, "wasmtime_context_get_data");
    bindSymbol_stdcall(lib, wasmtime_context_set_data, "wasmtime_context_set_data");
    bindSymbol_stdcall(lib, wasmtime_context_gc, "wasmtime_context_gc");
    bindSymbol_stdcall(lib, wasmtime_context_set_fuel, "wasmtime_context_set_fuel");
    bindSymbol_stdcall(lib, wasmtime_context_get_fuel, "wasmtime_context_get_fuel");
    if (!min) bindSymbol_stdcall(lib, wasmtime_context_set_wasi, "wasmtime_context_set_wasi");
    bindSymbol_stdcall(lib, wasmtime_context_set_epoch_deadline, "wasmtime_context_set_epoch_deadline");
    bindSymbol_stdcall(lib, wasmtime_store_epoch_deadline_callback, "wasmtime_store_epoch_deadline_callback");
    bindSymbol_stdcall(lib, wasmtime_extern_delete, "wasmtime_extern_delete");
    bindSymbol_stdcall(lib, wasmtime_extern_type, "wasmtime_extern_type");
    bindSymbol_stdcall(lib, wasmtime_anyref_clone, "wasmtime_anyref_clone");
    bindSymbol_stdcall(lib, wasmtime_anyref_delete, "wasmtime_anyref_delete");
    bindSymbol_stdcall(lib, wasmtime_anyref_from_raw, "wasmtime_anyref_from_raw");
    bindSymbol_stdcall(lib, wasmtime_anyref_to_raw, "wasmtime_anyref_to_raw");
    bindSymbol_stdcall(lib, wasmtime_anyref_from_i31, "wasmtime_anyref_from_i31");
    bindSymbol_stdcall(lib, wasmtime_anyref_i31_get_u, "wasmtime_anyref_i31_get_u");
    bindSymbol_stdcall(lib, wasmtime_anyref_i31_get_s, "wasmtime_anyref_i31_get_s");
    bindSymbol_stdcall(lib, wasmtime_externref_new, "wasmtime_externref_new");
    bindSymbol_stdcall(lib, wasmtime_externref_data, "wasmtime_externref_data");
    bindSymbol_stdcall(lib, wasmtime_externref_clone, "wasmtime_externref_clone");
    bindSymbol_stdcall(lib, wasmtime_externref_delete, "wasmtime_externref_delete");
    bindSymbol_stdcall(lib, wasmtime_externref_from_raw, "wasmtime_externref_from_raw");
    bindSymbol_stdcall(lib, wasmtime_externref_to_raw, "wasmtime_externref_to_raw");
    bindSymbol_stdcall(lib, wasmtime_val_delete, "wasmtime_val_delete");
    bindSymbol_stdcall(lib, wasmtime_val_copy, "wasmtime_val_copy");
    bindSymbol_stdcall(lib, wasmtime_func_new, "wasmtime_func_new");
    bindSymbol_stdcall(lib, wasmtime_func_new_unchecked, "wasmtime_func_new_unchecked");
    bindSymbol_stdcall(lib, wasmtime_func_type, "wasmtime_func_type");
    bindSymbol_stdcall(lib, wasmtime_func_call, "wasmtime_func_call");
    bindSymbol_stdcall(lib, wasmtime_func_call_unchecked, "wasmtime_func_call_unchecked");
    bindSymbol_stdcall(lib, wasmtime_caller_export_get, "wasmtime_caller_export_get");
    bindSymbol_stdcall(lib, wasmtime_caller_context, "wasmtime_caller_context");
    bindSymbol_stdcall(lib, wasmtime_func_from_raw, "wasmtime_func_from_raw");
    bindSymbol_stdcall(lib, wasmtime_func_to_raw, "wasmtime_func_to_raw");
    bindSymbol_stdcall(lib, wasmtime_global_new, "wasmtime_global_new");
    bindSymbol_stdcall(lib, wasmtime_global_type, "wasmtime_global_type");
    bindSymbol_stdcall(lib, wasmtime_global_get, "wasmtime_global_get");
    bindSymbol_stdcall(lib, wasmtime_global_set, "wasmtime_global_set");
    bindSymbol_stdcall(lib, wasmtime_instance_new, "wasmtime_instance_new");
    bindSymbol_stdcall(lib, wasmtime_instance_export_get, "wasmtime_instance_export_get");
    bindSymbol_stdcall(lib, wasmtime_instance_export_nth, "wasmtime_instance_export_nth");
    bindSymbol_stdcall(lib, wasmtime_instance_pre_delete, "wasmtime_instance_pre_delete");
    bindSymbol_stdcall(lib, wasmtime_instance_pre_instantiate, "wasmtime_instance_pre_instantiate");
    bindSymbol_stdcall(lib, wasmtime_instance_pre_module, "wasmtime_instance_pre_module");
    bindSymbol_stdcall(lib, wasmtime_linker_new, "wasmtime_linker_new");
    bindSymbol_stdcall(lib, wasmtime_linker_clone, "wasmtime_linker_clone");
    bindSymbol_stdcall(lib, wasmtime_linker_delete, "wasmtime_linker_delete");
    bindSymbol_stdcall(lib, wasmtime_linker_allow_shadowing, "wasmtime_linker_allow_shadowing");
    bindSymbol_stdcall(lib, wasmtime_linker_define, "wasmtime_linker_define");
    bindSymbol_stdcall(lib, wasmtime_linker_define_func, "wasmtime_linker_define_func");
    bindSymbol_stdcall(lib, wasmtime_linker_define_func_unchecked, "wasmtime_linker_define_func_unchecked");
    if (!min) bindSymbol_stdcall(lib, wasmtime_linker_define_wasi, "wasmtime_linker_define_wasi");
    bindSymbol_stdcall(lib, wasmtime_linker_define_instance, "wasmtime_linker_define_instance");
    bindSymbol_stdcall(lib, wasmtime_linker_instantiate, "wasmtime_linker_instantiate");
    bindSymbol_stdcall(lib, wasmtime_linker_module, "wasmtime_linker_module");
    bindSymbol_stdcall(lib, wasmtime_linker_get_default, "wasmtime_linker_get_default");
    bindSymbol_stdcall(lib, wasmtime_linker_get, "wasmtime_linker_get");
    bindSymbol_stdcall(lib, wasmtime_linker_instantiate_pre, "wasmtime_linker_instantiate_pre");
    bindSymbol_stdcall(lib, wasmtime_memorytype_new, "wasmtime_memorytype_new");
    bindSymbol_stdcall(lib, wasmtime_memorytype_minimum, "wasmtime_memorytype_minimum");
    bindSymbol_stdcall(lib, wasmtime_memorytype_maximum, "wasmtime_memorytype_maximum");
    bindSymbol_stdcall(lib, wasmtime_memorytype_is64, "wasmtime_memorytype_is64");
    bindSymbol_stdcall(lib, wasmtime_memorytype_isshared, "wasmtime_memorytype_isshared");
    bindSymbol_stdcall(lib, wasmtime_memory_new, "wasmtime_memory_new");
    bindSymbol_stdcall(lib, wasmtime_memory_type, "wasmtime_memory_type");
    bindSymbol_stdcall(lib, wasmtime_memory_data, "wasmtime_memory_data");
    bindSymbol_stdcall(lib, wasmtime_memory_data_size, "wasmtime_memory_data_size");
    bindSymbol_stdcall(lib, wasmtime_memory_size, "wasmtime_memory_size");
    bindSymbol_stdcall(lib, wasmtime_memory_grow, "wasmtime_memory_grow");
    if (!min) {
        bindSymbol_stdcall(lib, wasmtime_guestprofiler_delete, "wasmtime_guestprofiler_delete");
        bindSymbol_stdcall(lib, wasmtime_guestprofiler_new, "wasmtime_guestprofiler_new");
        bindSymbol_stdcall(lib, wasmtime_guestprofiler_sample, "wasmtime_guestprofiler_sample");
        bindSymbol_stdcall(lib, wasmtime_guestprofiler_finish, "wasmtime_guestprofiler_finish");
    }
    bindSymbol_stdcall(lib, wasmtime_table_new, "wasmtime_table_new");
    bindSymbol_stdcall(lib, wasmtime_table_type, "wasmtime_table_type");
    bindSymbol_stdcall(lib, wasmtime_table_get, "wasmtime_table_get");
    bindSymbol_stdcall(lib, wasmtime_table_set, "wasmtime_table_set");
    bindSymbol_stdcall(lib, wasmtime_table_size, "wasmtime_table_size");
    bindSymbol_stdcall(lib, wasmtime_table_grow, "wasmtime_table_grow");
    bindSymbol_stdcall(lib, wasmtime_trap_new, "wasmtime_trap_new");
    bindSymbol_stdcall(lib, wasmtime_trap_code, "wasmtime_trap_code");
    bindSymbol_stdcall(lib, wasmtime_frame_func_name, "wasmtime_frame_func_name");
    bindSymbol_stdcall(lib, wasmtime_frame_module_name, "wasmtime_frame_module_name");
    if (!min) {
        bindSymbol_stdcall(lib, wasmtime_config_async_support_set, "wasmtime_config_async_support_set");
        bindSymbol_stdcall(lib, wasmtime_config_async_stack_size_set, "wasmtime_config_async_stack_size_set");
        bindSymbol_stdcall(lib, wasmtime_context_fuel_async_yield_interval, "wasmtime_context_fuel_async_yield_interval");
        bindSymbol_stdcall(lib, wasmtime_context_epoch_deadline_async_yield_and_update, "wasmtime_context_epoch_deadline_async_yield_and_update");
        bindSymbol_stdcall(lib, wasmtime_call_future_poll, "wasmtime_call_future_poll");
        bindSymbol_stdcall(lib, wasmtime_call_future_delete, "wasmtime_call_future_delete");
        bindSymbol_stdcall(lib, wasmtime_func_call_async, "wasmtime_func_call_async");
        bindSymbol_stdcall(lib, wasmtime_linker_define_async_func, "wasmtime_linker_define_async_func");
        bindSymbol_stdcall(lib, wasmtime_linker_instantiate_async, "wasmtime_linker_instantiate_async");
        bindSymbol_stdcall(lib, wasmtime_instance_pre_instantiate_async, "wasmtime_instance_pre_instantiate_async");
        bindSymbol_stdcall(lib, wasmtime_config_host_stack_creator_set, "wasmtime_config_host_stack_creator_set");
        bindSymbol_stdcall(lib, wasmtime_wat2wasm, "wasmtime_wat2wasm");
    }
}
